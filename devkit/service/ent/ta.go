// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/anonymous-author-00000/ra-webs/devkit/service/ent/ta"
)

// TA is the model entity for the TA schema.
type TA struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Evidence holds the value of the "evidence" field.
	Evidence string `json:"evidence,omitempty"`
	// Repository holds the value of the "repository" field.
	Repository string `json:"repository,omitempty"`
	// CommitID holds the value of the "commit_id" field.
	CommitID string `json:"commit_id,omitempty"`
	// PublicKey holds the value of the "public_key" field.
	PublicKey    []byte `json:"public_key,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TA) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ta.FieldPublicKey:
			values[i] = new([]byte)
		case ta.FieldID:
			values[i] = new(sql.NullInt64)
		case ta.FieldEvidence, ta.FieldRepository, ta.FieldCommitID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TA fields.
func (t *TA) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ta.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case ta.FieldEvidence:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field evidence", values[i])
			} else if value.Valid {
				t.Evidence = value.String
			}
		case ta.FieldRepository:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field repository", values[i])
			} else if value.Valid {
				t.Repository = value.String
			}
		case ta.FieldCommitID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field commit_id", values[i])
			} else if value.Valid {
				t.CommitID = value.String
			}
		case ta.FieldPublicKey:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field public_key", values[i])
			} else if value != nil {
				t.PublicKey = *value
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TA.
// This includes values selected through modifiers, order, etc.
func (t *TA) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// Update returns a builder for updating this TA.
// Note that you need to call TA.Unwrap() before calling this method if this TA
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *TA) Update() *TAUpdateOne {
	return NewTAClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the TA entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *TA) Unwrap() *TA {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: TA is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *TA) String() string {
	var builder strings.Builder
	builder.WriteString("TA(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("evidence=")
	builder.WriteString(t.Evidence)
	builder.WriteString(", ")
	builder.WriteString("repository=")
	builder.WriteString(t.Repository)
	builder.WriteString(", ")
	builder.WriteString("commit_id=")
	builder.WriteString(t.CommitID)
	builder.WriteString(", ")
	builder.WriteString("public_key=")
	builder.WriteString(fmt.Sprintf("%v", t.PublicKey))
	builder.WriteByte(')')
	return builder.String()
}

// TAs is a parsable slice of TA.
type TAs []*TA
