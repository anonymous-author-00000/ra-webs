// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/anonymous-author-00000/ra-webs/devkit/service/ent/predicate"
	"github.com/anonymous-author-00000/ra-webs/devkit/service/ent/ta"
)

// TAUpdate is the builder for updating TA entities.
type TAUpdate struct {
	config
	hooks    []Hook
	mutation *TAMutation
}

// Where appends a list predicates to the TAUpdate builder.
func (tu *TAUpdate) Where(ps ...predicate.TA) *TAUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetEvidence sets the "evidence" field.
func (tu *TAUpdate) SetEvidence(s string) *TAUpdate {
	tu.mutation.SetEvidence(s)
	return tu
}

// SetNillableEvidence sets the "evidence" field if the given value is not nil.
func (tu *TAUpdate) SetNillableEvidence(s *string) *TAUpdate {
	if s != nil {
		tu.SetEvidence(*s)
	}
	return tu
}

// SetRepository sets the "repository" field.
func (tu *TAUpdate) SetRepository(s string) *TAUpdate {
	tu.mutation.SetRepository(s)
	return tu
}

// SetNillableRepository sets the "repository" field if the given value is not nil.
func (tu *TAUpdate) SetNillableRepository(s *string) *TAUpdate {
	if s != nil {
		tu.SetRepository(*s)
	}
	return tu
}

// SetCommitID sets the "commit_id" field.
func (tu *TAUpdate) SetCommitID(s string) *TAUpdate {
	tu.mutation.SetCommitID(s)
	return tu
}

// SetNillableCommitID sets the "commit_id" field if the given value is not nil.
func (tu *TAUpdate) SetNillableCommitID(s *string) *TAUpdate {
	if s != nil {
		tu.SetCommitID(*s)
	}
	return tu
}

// SetPublicKey sets the "public_key" field.
func (tu *TAUpdate) SetPublicKey(b []byte) *TAUpdate {
	tu.mutation.SetPublicKey(b)
	return tu
}

// Mutation returns the TAMutation object of the builder.
func (tu *TAUpdate) Mutation() *TAMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TAUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TAUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TAUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TAUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TAUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(ta.Table, ta.Columns, sqlgraph.NewFieldSpec(ta.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Evidence(); ok {
		_spec.SetField(ta.FieldEvidence, field.TypeString, value)
	}
	if value, ok := tu.mutation.Repository(); ok {
		_spec.SetField(ta.FieldRepository, field.TypeString, value)
	}
	if value, ok := tu.mutation.CommitID(); ok {
		_spec.SetField(ta.FieldCommitID, field.TypeString, value)
	}
	if value, ok := tu.mutation.PublicKey(); ok {
		_spec.SetField(ta.FieldPublicKey, field.TypeBytes, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ta.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TAUpdateOne is the builder for updating a single TA entity.
type TAUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TAMutation
}

// SetEvidence sets the "evidence" field.
func (tuo *TAUpdateOne) SetEvidence(s string) *TAUpdateOne {
	tuo.mutation.SetEvidence(s)
	return tuo
}

// SetNillableEvidence sets the "evidence" field if the given value is not nil.
func (tuo *TAUpdateOne) SetNillableEvidence(s *string) *TAUpdateOne {
	if s != nil {
		tuo.SetEvidence(*s)
	}
	return tuo
}

// SetRepository sets the "repository" field.
func (tuo *TAUpdateOne) SetRepository(s string) *TAUpdateOne {
	tuo.mutation.SetRepository(s)
	return tuo
}

// SetNillableRepository sets the "repository" field if the given value is not nil.
func (tuo *TAUpdateOne) SetNillableRepository(s *string) *TAUpdateOne {
	if s != nil {
		tuo.SetRepository(*s)
	}
	return tuo
}

// SetCommitID sets the "commit_id" field.
func (tuo *TAUpdateOne) SetCommitID(s string) *TAUpdateOne {
	tuo.mutation.SetCommitID(s)
	return tuo
}

// SetNillableCommitID sets the "commit_id" field if the given value is not nil.
func (tuo *TAUpdateOne) SetNillableCommitID(s *string) *TAUpdateOne {
	if s != nil {
		tuo.SetCommitID(*s)
	}
	return tuo
}

// SetPublicKey sets the "public_key" field.
func (tuo *TAUpdateOne) SetPublicKey(b []byte) *TAUpdateOne {
	tuo.mutation.SetPublicKey(b)
	return tuo
}

// Mutation returns the TAMutation object of the builder.
func (tuo *TAUpdateOne) Mutation() *TAMutation {
	return tuo.mutation
}

// Where appends a list predicates to the TAUpdate builder.
func (tuo *TAUpdateOne) Where(ps ...predicate.TA) *TAUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TAUpdateOne) Select(field string, fields ...string) *TAUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated TA entity.
func (tuo *TAUpdateOne) Save(ctx context.Context) (*TA, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TAUpdateOne) SaveX(ctx context.Context) *TA {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TAUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TAUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TAUpdateOne) sqlSave(ctx context.Context) (_node *TA, err error) {
	_spec := sqlgraph.NewUpdateSpec(ta.Table, ta.Columns, sqlgraph.NewFieldSpec(ta.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TA.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ta.FieldID)
		for _, f := range fields {
			if !ta.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ta.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Evidence(); ok {
		_spec.SetField(ta.FieldEvidence, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Repository(); ok {
		_spec.SetField(ta.FieldRepository, field.TypeString, value)
	}
	if value, ok := tuo.mutation.CommitID(); ok {
		_spec.SetField(ta.FieldCommitID, field.TypeString, value)
	}
	if value, ok := tuo.mutation.PublicKey(); ok {
		_spec.SetField(ta.FieldPublicKey, field.TypeBytes, value)
	}
	_node = &TA{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ta.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
