// Code generated by ent, DO NOT EDIT.

package ta

import (
	"entgo.io/ent/dialect/sql"
	"github.com/anonymous-author-00000/ra-webs/devkit/service/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TA {
	return predicate.TA(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TA {
	return predicate.TA(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TA {
	return predicate.TA(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TA {
	return predicate.TA(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TA {
	return predicate.TA(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TA {
	return predicate.TA(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TA {
	return predicate.TA(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TA {
	return predicate.TA(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TA {
	return predicate.TA(sql.FieldLTE(FieldID, id))
}

// Evidence applies equality check predicate on the "evidence" field. It's identical to EvidenceEQ.
func Evidence(v string) predicate.TA {
	return predicate.TA(sql.FieldEQ(FieldEvidence, v))
}

// Repository applies equality check predicate on the "repository" field. It's identical to RepositoryEQ.
func Repository(v string) predicate.TA {
	return predicate.TA(sql.FieldEQ(FieldRepository, v))
}

// CommitID applies equality check predicate on the "commit_id" field. It's identical to CommitIDEQ.
func CommitID(v string) predicate.TA {
	return predicate.TA(sql.FieldEQ(FieldCommitID, v))
}

// PublicKey applies equality check predicate on the "public_key" field. It's identical to PublicKeyEQ.
func PublicKey(v []byte) predicate.TA {
	return predicate.TA(sql.FieldEQ(FieldPublicKey, v))
}

// EvidenceEQ applies the EQ predicate on the "evidence" field.
func EvidenceEQ(v string) predicate.TA {
	return predicate.TA(sql.FieldEQ(FieldEvidence, v))
}

// EvidenceNEQ applies the NEQ predicate on the "evidence" field.
func EvidenceNEQ(v string) predicate.TA {
	return predicate.TA(sql.FieldNEQ(FieldEvidence, v))
}

// EvidenceIn applies the In predicate on the "evidence" field.
func EvidenceIn(vs ...string) predicate.TA {
	return predicate.TA(sql.FieldIn(FieldEvidence, vs...))
}

// EvidenceNotIn applies the NotIn predicate on the "evidence" field.
func EvidenceNotIn(vs ...string) predicate.TA {
	return predicate.TA(sql.FieldNotIn(FieldEvidence, vs...))
}

// EvidenceGT applies the GT predicate on the "evidence" field.
func EvidenceGT(v string) predicate.TA {
	return predicate.TA(sql.FieldGT(FieldEvidence, v))
}

// EvidenceGTE applies the GTE predicate on the "evidence" field.
func EvidenceGTE(v string) predicate.TA {
	return predicate.TA(sql.FieldGTE(FieldEvidence, v))
}

// EvidenceLT applies the LT predicate on the "evidence" field.
func EvidenceLT(v string) predicate.TA {
	return predicate.TA(sql.FieldLT(FieldEvidence, v))
}

// EvidenceLTE applies the LTE predicate on the "evidence" field.
func EvidenceLTE(v string) predicate.TA {
	return predicate.TA(sql.FieldLTE(FieldEvidence, v))
}

// EvidenceContains applies the Contains predicate on the "evidence" field.
func EvidenceContains(v string) predicate.TA {
	return predicate.TA(sql.FieldContains(FieldEvidence, v))
}

// EvidenceHasPrefix applies the HasPrefix predicate on the "evidence" field.
func EvidenceHasPrefix(v string) predicate.TA {
	return predicate.TA(sql.FieldHasPrefix(FieldEvidence, v))
}

// EvidenceHasSuffix applies the HasSuffix predicate on the "evidence" field.
func EvidenceHasSuffix(v string) predicate.TA {
	return predicate.TA(sql.FieldHasSuffix(FieldEvidence, v))
}

// EvidenceEqualFold applies the EqualFold predicate on the "evidence" field.
func EvidenceEqualFold(v string) predicate.TA {
	return predicate.TA(sql.FieldEqualFold(FieldEvidence, v))
}

// EvidenceContainsFold applies the ContainsFold predicate on the "evidence" field.
func EvidenceContainsFold(v string) predicate.TA {
	return predicate.TA(sql.FieldContainsFold(FieldEvidence, v))
}

// RepositoryEQ applies the EQ predicate on the "repository" field.
func RepositoryEQ(v string) predicate.TA {
	return predicate.TA(sql.FieldEQ(FieldRepository, v))
}

// RepositoryNEQ applies the NEQ predicate on the "repository" field.
func RepositoryNEQ(v string) predicate.TA {
	return predicate.TA(sql.FieldNEQ(FieldRepository, v))
}

// RepositoryIn applies the In predicate on the "repository" field.
func RepositoryIn(vs ...string) predicate.TA {
	return predicate.TA(sql.FieldIn(FieldRepository, vs...))
}

// RepositoryNotIn applies the NotIn predicate on the "repository" field.
func RepositoryNotIn(vs ...string) predicate.TA {
	return predicate.TA(sql.FieldNotIn(FieldRepository, vs...))
}

// RepositoryGT applies the GT predicate on the "repository" field.
func RepositoryGT(v string) predicate.TA {
	return predicate.TA(sql.FieldGT(FieldRepository, v))
}

// RepositoryGTE applies the GTE predicate on the "repository" field.
func RepositoryGTE(v string) predicate.TA {
	return predicate.TA(sql.FieldGTE(FieldRepository, v))
}

// RepositoryLT applies the LT predicate on the "repository" field.
func RepositoryLT(v string) predicate.TA {
	return predicate.TA(sql.FieldLT(FieldRepository, v))
}

// RepositoryLTE applies the LTE predicate on the "repository" field.
func RepositoryLTE(v string) predicate.TA {
	return predicate.TA(sql.FieldLTE(FieldRepository, v))
}

// RepositoryContains applies the Contains predicate on the "repository" field.
func RepositoryContains(v string) predicate.TA {
	return predicate.TA(sql.FieldContains(FieldRepository, v))
}

// RepositoryHasPrefix applies the HasPrefix predicate on the "repository" field.
func RepositoryHasPrefix(v string) predicate.TA {
	return predicate.TA(sql.FieldHasPrefix(FieldRepository, v))
}

// RepositoryHasSuffix applies the HasSuffix predicate on the "repository" field.
func RepositoryHasSuffix(v string) predicate.TA {
	return predicate.TA(sql.FieldHasSuffix(FieldRepository, v))
}

// RepositoryEqualFold applies the EqualFold predicate on the "repository" field.
func RepositoryEqualFold(v string) predicate.TA {
	return predicate.TA(sql.FieldEqualFold(FieldRepository, v))
}

// RepositoryContainsFold applies the ContainsFold predicate on the "repository" field.
func RepositoryContainsFold(v string) predicate.TA {
	return predicate.TA(sql.FieldContainsFold(FieldRepository, v))
}

// CommitIDEQ applies the EQ predicate on the "commit_id" field.
func CommitIDEQ(v string) predicate.TA {
	return predicate.TA(sql.FieldEQ(FieldCommitID, v))
}

// CommitIDNEQ applies the NEQ predicate on the "commit_id" field.
func CommitIDNEQ(v string) predicate.TA {
	return predicate.TA(sql.FieldNEQ(FieldCommitID, v))
}

// CommitIDIn applies the In predicate on the "commit_id" field.
func CommitIDIn(vs ...string) predicate.TA {
	return predicate.TA(sql.FieldIn(FieldCommitID, vs...))
}

// CommitIDNotIn applies the NotIn predicate on the "commit_id" field.
func CommitIDNotIn(vs ...string) predicate.TA {
	return predicate.TA(sql.FieldNotIn(FieldCommitID, vs...))
}

// CommitIDGT applies the GT predicate on the "commit_id" field.
func CommitIDGT(v string) predicate.TA {
	return predicate.TA(sql.FieldGT(FieldCommitID, v))
}

// CommitIDGTE applies the GTE predicate on the "commit_id" field.
func CommitIDGTE(v string) predicate.TA {
	return predicate.TA(sql.FieldGTE(FieldCommitID, v))
}

// CommitIDLT applies the LT predicate on the "commit_id" field.
func CommitIDLT(v string) predicate.TA {
	return predicate.TA(sql.FieldLT(FieldCommitID, v))
}

// CommitIDLTE applies the LTE predicate on the "commit_id" field.
func CommitIDLTE(v string) predicate.TA {
	return predicate.TA(sql.FieldLTE(FieldCommitID, v))
}

// CommitIDContains applies the Contains predicate on the "commit_id" field.
func CommitIDContains(v string) predicate.TA {
	return predicate.TA(sql.FieldContains(FieldCommitID, v))
}

// CommitIDHasPrefix applies the HasPrefix predicate on the "commit_id" field.
func CommitIDHasPrefix(v string) predicate.TA {
	return predicate.TA(sql.FieldHasPrefix(FieldCommitID, v))
}

// CommitIDHasSuffix applies the HasSuffix predicate on the "commit_id" field.
func CommitIDHasSuffix(v string) predicate.TA {
	return predicate.TA(sql.FieldHasSuffix(FieldCommitID, v))
}

// CommitIDEqualFold applies the EqualFold predicate on the "commit_id" field.
func CommitIDEqualFold(v string) predicate.TA {
	return predicate.TA(sql.FieldEqualFold(FieldCommitID, v))
}

// CommitIDContainsFold applies the ContainsFold predicate on the "commit_id" field.
func CommitIDContainsFold(v string) predicate.TA {
	return predicate.TA(sql.FieldContainsFold(FieldCommitID, v))
}

// PublicKeyEQ applies the EQ predicate on the "public_key" field.
func PublicKeyEQ(v []byte) predicate.TA {
	return predicate.TA(sql.FieldEQ(FieldPublicKey, v))
}

// PublicKeyNEQ applies the NEQ predicate on the "public_key" field.
func PublicKeyNEQ(v []byte) predicate.TA {
	return predicate.TA(sql.FieldNEQ(FieldPublicKey, v))
}

// PublicKeyIn applies the In predicate on the "public_key" field.
func PublicKeyIn(vs ...[]byte) predicate.TA {
	return predicate.TA(sql.FieldIn(FieldPublicKey, vs...))
}

// PublicKeyNotIn applies the NotIn predicate on the "public_key" field.
func PublicKeyNotIn(vs ...[]byte) predicate.TA {
	return predicate.TA(sql.FieldNotIn(FieldPublicKey, vs...))
}

// PublicKeyGT applies the GT predicate on the "public_key" field.
func PublicKeyGT(v []byte) predicate.TA {
	return predicate.TA(sql.FieldGT(FieldPublicKey, v))
}

// PublicKeyGTE applies the GTE predicate on the "public_key" field.
func PublicKeyGTE(v []byte) predicate.TA {
	return predicate.TA(sql.FieldGTE(FieldPublicKey, v))
}

// PublicKeyLT applies the LT predicate on the "public_key" field.
func PublicKeyLT(v []byte) predicate.TA {
	return predicate.TA(sql.FieldLT(FieldPublicKey, v))
}

// PublicKeyLTE applies the LTE predicate on the "public_key" field.
func PublicKeyLTE(v []byte) predicate.TA {
	return predicate.TA(sql.FieldLTE(FieldPublicKey, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TA) predicate.TA {
	return predicate.TA(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TA) predicate.TA {
	return predicate.TA(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TA) predicate.TA {
	return predicate.TA(sql.NotPredicates(p))
}
