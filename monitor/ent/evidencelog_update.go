// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/anonymous-author-00000/ra-webs/monitor/ent/evidencelog"
	"github.com/anonymous-author-00000/ra-webs/monitor/ent/predicate"
	"github.com/anonymous-author-00000/ra-webs/monitor/ent/ta"
)

// EvidenceLogUpdate is the builder for updating EvidenceLog entities.
type EvidenceLogUpdate struct {
	config
	hooks    []Hook
	mutation *EvidenceLogMutation
}

// Where appends a list predicates to the EvidenceLogUpdate builder.
func (elu *EvidenceLogUpdate) Where(ps ...predicate.EvidenceLog) *EvidenceLogUpdate {
	elu.mutation.Where(ps...)
	return elu
}

// SetEvidence sets the "evidence" field.
func (elu *EvidenceLogUpdate) SetEvidence(s string) *EvidenceLogUpdate {
	elu.mutation.SetEvidence(s)
	return elu
}

// SetNillableEvidence sets the "evidence" field if the given value is not nil.
func (elu *EvidenceLogUpdate) SetNillableEvidence(s *string) *EvidenceLogUpdate {
	if s != nil {
		elu.SetEvidence(*s)
	}
	return elu
}

// SetRepository sets the "repository" field.
func (elu *EvidenceLogUpdate) SetRepository(s string) *EvidenceLogUpdate {
	elu.mutation.SetRepository(s)
	return elu
}

// SetNillableRepository sets the "repository" field if the given value is not nil.
func (elu *EvidenceLogUpdate) SetNillableRepository(s *string) *EvidenceLogUpdate {
	if s != nil {
		elu.SetRepository(*s)
	}
	return elu
}

// SetCommitID sets the "commit_id" field.
func (elu *EvidenceLogUpdate) SetCommitID(s string) *EvidenceLogUpdate {
	elu.mutation.SetCommitID(s)
	return elu
}

// SetNillableCommitID sets the "commit_id" field if the given value is not nil.
func (elu *EvidenceLogUpdate) SetNillableCommitID(s *string) *EvidenceLogUpdate {
	if s != nil {
		elu.SetCommitID(*s)
	}
	return elu
}

// SetUniqueID sets the "unique_id" field.
func (elu *EvidenceLogUpdate) SetUniqueID(b []byte) *EvidenceLogUpdate {
	elu.mutation.SetUniqueID(b)
	return elu
}

// SetTaID sets the "ta" edge to the TA entity by ID.
func (elu *EvidenceLogUpdate) SetTaID(id int) *EvidenceLogUpdate {
	elu.mutation.SetTaID(id)
	return elu
}

// SetNillableTaID sets the "ta" edge to the TA entity by ID if the given value is not nil.
func (elu *EvidenceLogUpdate) SetNillableTaID(id *int) *EvidenceLogUpdate {
	if id != nil {
		elu = elu.SetTaID(*id)
	}
	return elu
}

// SetTa sets the "ta" edge to the TA entity.
func (elu *EvidenceLogUpdate) SetTa(t *TA) *EvidenceLogUpdate {
	return elu.SetTaID(t.ID)
}

// Mutation returns the EvidenceLogMutation object of the builder.
func (elu *EvidenceLogUpdate) Mutation() *EvidenceLogMutation {
	return elu.mutation
}

// ClearTa clears the "ta" edge to the TA entity.
func (elu *EvidenceLogUpdate) ClearTa() *EvidenceLogUpdate {
	elu.mutation.ClearTa()
	return elu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (elu *EvidenceLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, elu.sqlSave, elu.mutation, elu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (elu *EvidenceLogUpdate) SaveX(ctx context.Context) int {
	affected, err := elu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (elu *EvidenceLogUpdate) Exec(ctx context.Context) error {
	_, err := elu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elu *EvidenceLogUpdate) ExecX(ctx context.Context) {
	if err := elu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (elu *EvidenceLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(evidencelog.Table, evidencelog.Columns, sqlgraph.NewFieldSpec(evidencelog.FieldID, field.TypeInt))
	if ps := elu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := elu.mutation.Evidence(); ok {
		_spec.SetField(evidencelog.FieldEvidence, field.TypeString, value)
	}
	if value, ok := elu.mutation.Repository(); ok {
		_spec.SetField(evidencelog.FieldRepository, field.TypeString, value)
	}
	if value, ok := elu.mutation.CommitID(); ok {
		_spec.SetField(evidencelog.FieldCommitID, field.TypeString, value)
	}
	if value, ok := elu.mutation.UniqueID(); ok {
		_spec.SetField(evidencelog.FieldUniqueID, field.TypeBytes, value)
	}
	if elu.mutation.TaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   evidencelog.TaTable,
			Columns: []string{evidencelog.TaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ta.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := elu.mutation.TaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   evidencelog.TaTable,
			Columns: []string{evidencelog.TaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ta.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, elu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{evidencelog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	elu.mutation.done = true
	return n, nil
}

// EvidenceLogUpdateOne is the builder for updating a single EvidenceLog entity.
type EvidenceLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EvidenceLogMutation
}

// SetEvidence sets the "evidence" field.
func (eluo *EvidenceLogUpdateOne) SetEvidence(s string) *EvidenceLogUpdateOne {
	eluo.mutation.SetEvidence(s)
	return eluo
}

// SetNillableEvidence sets the "evidence" field if the given value is not nil.
func (eluo *EvidenceLogUpdateOne) SetNillableEvidence(s *string) *EvidenceLogUpdateOne {
	if s != nil {
		eluo.SetEvidence(*s)
	}
	return eluo
}

// SetRepository sets the "repository" field.
func (eluo *EvidenceLogUpdateOne) SetRepository(s string) *EvidenceLogUpdateOne {
	eluo.mutation.SetRepository(s)
	return eluo
}

// SetNillableRepository sets the "repository" field if the given value is not nil.
func (eluo *EvidenceLogUpdateOne) SetNillableRepository(s *string) *EvidenceLogUpdateOne {
	if s != nil {
		eluo.SetRepository(*s)
	}
	return eluo
}

// SetCommitID sets the "commit_id" field.
func (eluo *EvidenceLogUpdateOne) SetCommitID(s string) *EvidenceLogUpdateOne {
	eluo.mutation.SetCommitID(s)
	return eluo
}

// SetNillableCommitID sets the "commit_id" field if the given value is not nil.
func (eluo *EvidenceLogUpdateOne) SetNillableCommitID(s *string) *EvidenceLogUpdateOne {
	if s != nil {
		eluo.SetCommitID(*s)
	}
	return eluo
}

// SetUniqueID sets the "unique_id" field.
func (eluo *EvidenceLogUpdateOne) SetUniqueID(b []byte) *EvidenceLogUpdateOne {
	eluo.mutation.SetUniqueID(b)
	return eluo
}

// SetTaID sets the "ta" edge to the TA entity by ID.
func (eluo *EvidenceLogUpdateOne) SetTaID(id int) *EvidenceLogUpdateOne {
	eluo.mutation.SetTaID(id)
	return eluo
}

// SetNillableTaID sets the "ta" edge to the TA entity by ID if the given value is not nil.
func (eluo *EvidenceLogUpdateOne) SetNillableTaID(id *int) *EvidenceLogUpdateOne {
	if id != nil {
		eluo = eluo.SetTaID(*id)
	}
	return eluo
}

// SetTa sets the "ta" edge to the TA entity.
func (eluo *EvidenceLogUpdateOne) SetTa(t *TA) *EvidenceLogUpdateOne {
	return eluo.SetTaID(t.ID)
}

// Mutation returns the EvidenceLogMutation object of the builder.
func (eluo *EvidenceLogUpdateOne) Mutation() *EvidenceLogMutation {
	return eluo.mutation
}

// ClearTa clears the "ta" edge to the TA entity.
func (eluo *EvidenceLogUpdateOne) ClearTa() *EvidenceLogUpdateOne {
	eluo.mutation.ClearTa()
	return eluo
}

// Where appends a list predicates to the EvidenceLogUpdate builder.
func (eluo *EvidenceLogUpdateOne) Where(ps ...predicate.EvidenceLog) *EvidenceLogUpdateOne {
	eluo.mutation.Where(ps...)
	return eluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eluo *EvidenceLogUpdateOne) Select(field string, fields ...string) *EvidenceLogUpdateOne {
	eluo.fields = append([]string{field}, fields...)
	return eluo
}

// Save executes the query and returns the updated EvidenceLog entity.
func (eluo *EvidenceLogUpdateOne) Save(ctx context.Context) (*EvidenceLog, error) {
	return withHooks(ctx, eluo.sqlSave, eluo.mutation, eluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eluo *EvidenceLogUpdateOne) SaveX(ctx context.Context) *EvidenceLog {
	node, err := eluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eluo *EvidenceLogUpdateOne) Exec(ctx context.Context) error {
	_, err := eluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eluo *EvidenceLogUpdateOne) ExecX(ctx context.Context) {
	if err := eluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eluo *EvidenceLogUpdateOne) sqlSave(ctx context.Context) (_node *EvidenceLog, err error) {
	_spec := sqlgraph.NewUpdateSpec(evidencelog.Table, evidencelog.Columns, sqlgraph.NewFieldSpec(evidencelog.FieldID, field.TypeInt))
	id, ok := eluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EvidenceLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, evidencelog.FieldID)
		for _, f := range fields {
			if !evidencelog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != evidencelog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eluo.mutation.Evidence(); ok {
		_spec.SetField(evidencelog.FieldEvidence, field.TypeString, value)
	}
	if value, ok := eluo.mutation.Repository(); ok {
		_spec.SetField(evidencelog.FieldRepository, field.TypeString, value)
	}
	if value, ok := eluo.mutation.CommitID(); ok {
		_spec.SetField(evidencelog.FieldCommitID, field.TypeString, value)
	}
	if value, ok := eluo.mutation.UniqueID(); ok {
		_spec.SetField(evidencelog.FieldUniqueID, field.TypeBytes, value)
	}
	if eluo.mutation.TaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   evidencelog.TaTable,
			Columns: []string{evidencelog.TaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ta.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eluo.mutation.TaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   evidencelog.TaTable,
			Columns: []string{evidencelog.TaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ta.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EvidenceLog{config: eluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{evidencelog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eluo.mutation.done = true
	return _node, nil
}
