// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/anonymous-author-00000/ra-webs/monitor/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/anonymous-author-00000/ra-webs/monitor/ent/ctlog"
	"github.com/anonymous-author-00000/ra-webs/monitor/ent/evidencelog"
	"github.com/anonymous-author-00000/ra-webs/monitor/ent/subscription"
	"github.com/anonymous-author-00000/ra-webs/monitor/ent/ta"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// CTLog is the client for interacting with the CTLog builders.
	CTLog *CTLogClient
	// EvidenceLog is the client for interacting with the EvidenceLog builders.
	EvidenceLog *EvidenceLogClient
	// Subscription is the client for interacting with the Subscription builders.
	Subscription *SubscriptionClient
	// TA is the client for interacting with the TA builders.
	TA *TAClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.CTLog = NewCTLogClient(c.config)
	c.EvidenceLog = NewEvidenceLogClient(c.config)
	c.Subscription = NewSubscriptionClient(c.config)
	c.TA = NewTAClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		CTLog:        NewCTLogClient(cfg),
		EvidenceLog:  NewEvidenceLogClient(cfg),
		Subscription: NewSubscriptionClient(cfg),
		TA:           NewTAClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		CTLog:        NewCTLogClient(cfg),
		EvidenceLog:  NewEvidenceLogClient(cfg),
		Subscription: NewSubscriptionClient(cfg),
		TA:           NewTAClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		CTLog.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.CTLog.Use(hooks...)
	c.EvidenceLog.Use(hooks...)
	c.Subscription.Use(hooks...)
	c.TA.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.CTLog.Intercept(interceptors...)
	c.EvidenceLog.Intercept(interceptors...)
	c.Subscription.Intercept(interceptors...)
	c.TA.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *CTLogMutation:
		return c.CTLog.mutate(ctx, m)
	case *EvidenceLogMutation:
		return c.EvidenceLog.mutate(ctx, m)
	case *SubscriptionMutation:
		return c.Subscription.mutate(ctx, m)
	case *TAMutation:
		return c.TA.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// CTLogClient is a client for the CTLog schema.
type CTLogClient struct {
	config
}

// NewCTLogClient returns a client for the CTLog from the given config.
func NewCTLogClient(c config) *CTLogClient {
	return &CTLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ctlog.Hooks(f(g(h())))`.
func (c *CTLogClient) Use(hooks ...Hook) {
	c.hooks.CTLog = append(c.hooks.CTLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ctlog.Intercept(f(g(h())))`.
func (c *CTLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.CTLog = append(c.inters.CTLog, interceptors...)
}

// Create returns a builder for creating a CTLog entity.
func (c *CTLogClient) Create() *CTLogCreate {
	mutation := newCTLogMutation(c.config, OpCreate)
	return &CTLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CTLog entities.
func (c *CTLogClient) CreateBulk(builders ...*CTLogCreate) *CTLogCreateBulk {
	return &CTLogCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CTLogClient) MapCreateBulk(slice any, setFunc func(*CTLogCreate, int)) *CTLogCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CTLogCreateBulk{err: fmt.Errorf("calling to CTLogClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CTLogCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CTLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CTLog.
func (c *CTLogClient) Update() *CTLogUpdate {
	mutation := newCTLogMutation(c.config, OpUpdate)
	return &CTLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CTLogClient) UpdateOne(cl *CTLog) *CTLogUpdateOne {
	mutation := newCTLogMutation(c.config, OpUpdateOne, withCTLog(cl))
	return &CTLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CTLogClient) UpdateOneID(id int) *CTLogUpdateOne {
	mutation := newCTLogMutation(c.config, OpUpdateOne, withCTLogID(id))
	return &CTLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CTLog.
func (c *CTLogClient) Delete() *CTLogDelete {
	mutation := newCTLogMutation(c.config, OpDelete)
	return &CTLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CTLogClient) DeleteOne(cl *CTLog) *CTLogDeleteOne {
	return c.DeleteOneID(cl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CTLogClient) DeleteOneID(id int) *CTLogDeleteOne {
	builder := c.Delete().Where(ctlog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CTLogDeleteOne{builder}
}

// Query returns a query builder for CTLog.
func (c *CTLogClient) Query() *CTLogQuery {
	return &CTLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCTLog},
		inters: c.Interceptors(),
	}
}

// Get returns a CTLog entity by its id.
func (c *CTLogClient) Get(ctx context.Context, id int) (*CTLog, error) {
	return c.Query().Where(ctlog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CTLogClient) GetX(ctx context.Context, id int) *CTLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTa queries the ta edge of a CTLog.
func (c *CTLogClient) QueryTa(cl *CTLog) *TAQuery {
	query := (&TAClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ctlog.Table, ctlog.FieldID, id),
			sqlgraph.To(ta.Table, ta.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ctlog.TaTable, ctlog.TaColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CTLogClient) Hooks() []Hook {
	return c.hooks.CTLog
}

// Interceptors returns the client interceptors.
func (c *CTLogClient) Interceptors() []Interceptor {
	return c.inters.CTLog
}

func (c *CTLogClient) mutate(ctx context.Context, m *CTLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CTLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CTLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CTLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CTLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CTLog mutation op: %q", m.Op())
	}
}

// EvidenceLogClient is a client for the EvidenceLog schema.
type EvidenceLogClient struct {
	config
}

// NewEvidenceLogClient returns a client for the EvidenceLog from the given config.
func NewEvidenceLogClient(c config) *EvidenceLogClient {
	return &EvidenceLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `evidencelog.Hooks(f(g(h())))`.
func (c *EvidenceLogClient) Use(hooks ...Hook) {
	c.hooks.EvidenceLog = append(c.hooks.EvidenceLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `evidencelog.Intercept(f(g(h())))`.
func (c *EvidenceLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.EvidenceLog = append(c.inters.EvidenceLog, interceptors...)
}

// Create returns a builder for creating a EvidenceLog entity.
func (c *EvidenceLogClient) Create() *EvidenceLogCreate {
	mutation := newEvidenceLogMutation(c.config, OpCreate)
	return &EvidenceLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EvidenceLog entities.
func (c *EvidenceLogClient) CreateBulk(builders ...*EvidenceLogCreate) *EvidenceLogCreateBulk {
	return &EvidenceLogCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EvidenceLogClient) MapCreateBulk(slice any, setFunc func(*EvidenceLogCreate, int)) *EvidenceLogCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EvidenceLogCreateBulk{err: fmt.Errorf("calling to EvidenceLogClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EvidenceLogCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EvidenceLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EvidenceLog.
func (c *EvidenceLogClient) Update() *EvidenceLogUpdate {
	mutation := newEvidenceLogMutation(c.config, OpUpdate)
	return &EvidenceLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EvidenceLogClient) UpdateOne(el *EvidenceLog) *EvidenceLogUpdateOne {
	mutation := newEvidenceLogMutation(c.config, OpUpdateOne, withEvidenceLog(el))
	return &EvidenceLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EvidenceLogClient) UpdateOneID(id int) *EvidenceLogUpdateOne {
	mutation := newEvidenceLogMutation(c.config, OpUpdateOne, withEvidenceLogID(id))
	return &EvidenceLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EvidenceLog.
func (c *EvidenceLogClient) Delete() *EvidenceLogDelete {
	mutation := newEvidenceLogMutation(c.config, OpDelete)
	return &EvidenceLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EvidenceLogClient) DeleteOne(el *EvidenceLog) *EvidenceLogDeleteOne {
	return c.DeleteOneID(el.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EvidenceLogClient) DeleteOneID(id int) *EvidenceLogDeleteOne {
	builder := c.Delete().Where(evidencelog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EvidenceLogDeleteOne{builder}
}

// Query returns a query builder for EvidenceLog.
func (c *EvidenceLogClient) Query() *EvidenceLogQuery {
	return &EvidenceLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEvidenceLog},
		inters: c.Interceptors(),
	}
}

// Get returns a EvidenceLog entity by its id.
func (c *EvidenceLogClient) Get(ctx context.Context, id int) (*EvidenceLog, error) {
	return c.Query().Where(evidencelog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EvidenceLogClient) GetX(ctx context.Context, id int) *EvidenceLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTa queries the ta edge of a EvidenceLog.
func (c *EvidenceLogClient) QueryTa(el *EvidenceLog) *TAQuery {
	query := (&TAClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := el.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(evidencelog.Table, evidencelog.FieldID, id),
			sqlgraph.To(ta.Table, ta.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, evidencelog.TaTable, evidencelog.TaColumn),
		)
		fromV = sqlgraph.Neighbors(el.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EvidenceLogClient) Hooks() []Hook {
	return c.hooks.EvidenceLog
}

// Interceptors returns the client interceptors.
func (c *EvidenceLogClient) Interceptors() []Interceptor {
	return c.inters.EvidenceLog
}

func (c *EvidenceLogClient) mutate(ctx context.Context, m *EvidenceLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EvidenceLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EvidenceLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EvidenceLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EvidenceLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EvidenceLog mutation op: %q", m.Op())
	}
}

// SubscriptionClient is a client for the Subscription schema.
type SubscriptionClient struct {
	config
}

// NewSubscriptionClient returns a client for the Subscription from the given config.
func NewSubscriptionClient(c config) *SubscriptionClient {
	return &SubscriptionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subscription.Hooks(f(g(h())))`.
func (c *SubscriptionClient) Use(hooks ...Hook) {
	c.hooks.Subscription = append(c.hooks.Subscription, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subscription.Intercept(f(g(h())))`.
func (c *SubscriptionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Subscription = append(c.inters.Subscription, interceptors...)
}

// Create returns a builder for creating a Subscription entity.
func (c *SubscriptionClient) Create() *SubscriptionCreate {
	mutation := newSubscriptionMutation(c.config, OpCreate)
	return &SubscriptionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Subscription entities.
func (c *SubscriptionClient) CreateBulk(builders ...*SubscriptionCreate) *SubscriptionCreateBulk {
	return &SubscriptionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SubscriptionClient) MapCreateBulk(slice any, setFunc func(*SubscriptionCreate, int)) *SubscriptionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SubscriptionCreateBulk{err: fmt.Errorf("calling to SubscriptionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SubscriptionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SubscriptionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Subscription.
func (c *SubscriptionClient) Update() *SubscriptionUpdate {
	mutation := newSubscriptionMutation(c.config, OpUpdate)
	return &SubscriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubscriptionClient) UpdateOne(s *Subscription) *SubscriptionUpdateOne {
	mutation := newSubscriptionMutation(c.config, OpUpdateOne, withSubscription(s))
	return &SubscriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubscriptionClient) UpdateOneID(id int) *SubscriptionUpdateOne {
	mutation := newSubscriptionMutation(c.config, OpUpdateOne, withSubscriptionID(id))
	return &SubscriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Subscription.
func (c *SubscriptionClient) Delete() *SubscriptionDelete {
	mutation := newSubscriptionMutation(c.config, OpDelete)
	return &SubscriptionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubscriptionClient) DeleteOne(s *Subscription) *SubscriptionDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubscriptionClient) DeleteOneID(id int) *SubscriptionDeleteOne {
	builder := c.Delete().Where(subscription.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubscriptionDeleteOne{builder}
}

// Query returns a query builder for Subscription.
func (c *SubscriptionClient) Query() *SubscriptionQuery {
	return &SubscriptionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubscription},
		inters: c.Interceptors(),
	}
}

// Get returns a Subscription entity by its id.
func (c *SubscriptionClient) Get(ctx context.Context, id int) (*Subscription, error) {
	return c.Query().Where(subscription.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubscriptionClient) GetX(ctx context.Context, id int) *Subscription {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SubscriptionClient) Hooks() []Hook {
	return c.hooks.Subscription
}

// Interceptors returns the client interceptors.
func (c *SubscriptionClient) Interceptors() []Interceptor {
	return c.inters.Subscription
}

func (c *SubscriptionClient) mutate(ctx context.Context, m *SubscriptionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubscriptionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubscriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubscriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubscriptionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Subscription mutation op: %q", m.Op())
	}
}

// TAClient is a client for the TA schema.
type TAClient struct {
	config
}

// NewTAClient returns a client for the TA from the given config.
func NewTAClient(c config) *TAClient {
	return &TAClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ta.Hooks(f(g(h())))`.
func (c *TAClient) Use(hooks ...Hook) {
	c.hooks.TA = append(c.hooks.TA, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ta.Intercept(f(g(h())))`.
func (c *TAClient) Intercept(interceptors ...Interceptor) {
	c.inters.TA = append(c.inters.TA, interceptors...)
}

// Create returns a builder for creating a TA entity.
func (c *TAClient) Create() *TACreate {
	mutation := newTAMutation(c.config, OpCreate)
	return &TACreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TA entities.
func (c *TAClient) CreateBulk(builders ...*TACreate) *TACreateBulk {
	return &TACreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TAClient) MapCreateBulk(slice any, setFunc func(*TACreate, int)) *TACreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TACreateBulk{err: fmt.Errorf("calling to TAClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TACreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TACreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TA.
func (c *TAClient) Update() *TAUpdate {
	mutation := newTAMutation(c.config, OpUpdate)
	return &TAUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TAClient) UpdateOne(t *TA) *TAUpdateOne {
	mutation := newTAMutation(c.config, OpUpdateOne, withTA(t))
	return &TAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TAClient) UpdateOneID(id int) *TAUpdateOne {
	mutation := newTAMutation(c.config, OpUpdateOne, withTAID(id))
	return &TAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TA.
func (c *TAClient) Delete() *TADelete {
	mutation := newTAMutation(c.config, OpDelete)
	return &TADelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TAClient) DeleteOne(t *TA) *TADeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TAClient) DeleteOneID(id int) *TADeleteOne {
	builder := c.Delete().Where(ta.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TADeleteOne{builder}
}

// Query returns a query builder for TA.
func (c *TAClient) Query() *TAQuery {
	return &TAQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTA},
		inters: c.Interceptors(),
	}
}

// Get returns a TA entity by its id.
func (c *TAClient) Get(ctx context.Context, id int) (*TA, error) {
	return c.Query().Where(ta.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TAClient) GetX(ctx context.Context, id int) *TA {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCtLog queries the ct_log edge of a TA.
func (c *TAClient) QueryCtLog(t *TA) *CTLogQuery {
	query := (&CTLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ta.Table, ta.FieldID, id),
			sqlgraph.To(ctlog.Table, ctlog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ta.CtLogTable, ta.CtLogColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEvidenceLog queries the evidence_log edge of a TA.
func (c *TAClient) QueryEvidenceLog(t *TA) *EvidenceLogQuery {
	query := (&EvidenceLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ta.Table, ta.FieldID, id),
			sqlgraph.To(evidencelog.Table, evidencelog.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ta.EvidenceLogTable, ta.EvidenceLogColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TAClient) Hooks() []Hook {
	return c.hooks.TA
}

// Interceptors returns the client interceptors.
func (c *TAClient) Interceptors() []Interceptor {
	return c.inters.TA
}

func (c *TAClient) mutate(ctx context.Context, m *TAMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TACreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TAUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TADelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TA mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		CTLog, EvidenceLog, Subscription, TA []ent.Hook
	}
	inters struct {
		CTLog, EvidenceLog, Subscription, TA []ent.Interceptor
	}
)
