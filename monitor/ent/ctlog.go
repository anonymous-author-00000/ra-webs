// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/anonymous-author-00000/ra-webs/monitor/ent/ctlog"
	"github.com/anonymous-author-00000/ra-webs/monitor/ent/ta"
)

// CTLog is the model entity for the CTLog schema.
type CTLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// MonitorLogID holds the value of the "monitor_log_id" field.
	MonitorLogID int `json:"monitor_log_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CTLogQuery when eager-loading is set.
	Edges        CTLogEdges `json:"edges"`
	ct_log_ta    *int
	selectValues sql.SelectValues
}

// CTLogEdges holds the relations/edges for other nodes in the graph.
type CTLogEdges struct {
	// Ta holds the value of the ta edge.
	Ta *TA `json:"ta,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TaOrErr returns the Ta value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CTLogEdges) TaOrErr() (*TA, error) {
	if e.Ta != nil {
		return e.Ta, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: ta.Label}
	}
	return nil, &NotLoadedError{edge: "ta"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CTLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ctlog.FieldID, ctlog.FieldMonitorLogID:
			values[i] = new(sql.NullInt64)
		case ctlog.ForeignKeys[0]: // ct_log_ta
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CTLog fields.
func (cl *CTLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ctlog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cl.ID = int(value.Int64)
		case ctlog.FieldMonitorLogID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field monitor_log_id", values[i])
			} else if value.Valid {
				cl.MonitorLogID = int(value.Int64)
			}
		case ctlog.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field ct_log_ta", value)
			} else if value.Valid {
				cl.ct_log_ta = new(int)
				*cl.ct_log_ta = int(value.Int64)
			}
		default:
			cl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CTLog.
// This includes values selected through modifiers, order, etc.
func (cl *CTLog) Value(name string) (ent.Value, error) {
	return cl.selectValues.Get(name)
}

// QueryTa queries the "ta" edge of the CTLog entity.
func (cl *CTLog) QueryTa() *TAQuery {
	return NewCTLogClient(cl.config).QueryTa(cl)
}

// Update returns a builder for updating this CTLog.
// Note that you need to call CTLog.Unwrap() before calling this method if this CTLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (cl *CTLog) Update() *CTLogUpdateOne {
	return NewCTLogClient(cl.config).UpdateOne(cl)
}

// Unwrap unwraps the CTLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cl *CTLog) Unwrap() *CTLog {
	_tx, ok := cl.config.driver.(*txDriver)
	if !ok {
		panic("ent: CTLog is not a transactional entity")
	}
	cl.config.driver = _tx.drv
	return cl
}

// String implements the fmt.Stringer.
func (cl *CTLog) String() string {
	var builder strings.Builder
	builder.WriteString("CTLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cl.ID))
	builder.WriteString("monitor_log_id=")
	builder.WriteString(fmt.Sprintf("%v", cl.MonitorLogID))
	builder.WriteByte(')')
	return builder.String()
}

// CTLogs is a parsable slice of CTLog.
type CTLogs []*CTLog
