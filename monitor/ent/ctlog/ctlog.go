// Code generated by ent, DO NOT EDIT.

package ctlog

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the ctlog type in the database.
	Label = "ct_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMonitorLogID holds the string denoting the monitor_log_id field in the database.
	FieldMonitorLogID = "monitor_log_id"
	// EdgeTa holds the string denoting the ta edge name in mutations.
	EdgeTa = "ta"
	// Table holds the table name of the ctlog in the database.
	Table = "ct_logs"
	// TaTable is the table that holds the ta relation/edge.
	TaTable = "ct_logs"
	// TaInverseTable is the table name for the TA entity.
	// It exists in this package in order to avoid circular dependency with the "ta" package.
	TaInverseTable = "tas"
	// TaColumn is the table column denoting the ta relation/edge.
	TaColumn = "ct_log_ta"
)

// Columns holds all SQL columns for ctlog fields.
var Columns = []string{
	FieldID,
	FieldMonitorLogID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "ct_logs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"ct_log_ta",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the CTLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMonitorLogID orders the results by the monitor_log_id field.
func ByMonitorLogID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMonitorLogID, opts...).ToFunc()
}

// ByTaField orders the results by ta field.
func ByTaField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaStep(), sql.OrderByField(field, opts...))
	}
}
func newTaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TaTable, TaColumn),
	)
}
