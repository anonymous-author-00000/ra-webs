// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/anonymous-author-00000/ra-webs/monitor/ent/ctlog"
	"github.com/anonymous-author-00000/ra-webs/monitor/ent/evidencelog"
	"github.com/anonymous-author-00000/ra-webs/monitor/ent/predicate"
	"github.com/anonymous-author-00000/ra-webs/monitor/ent/subscription"
	"github.com/anonymous-author-00000/ra-webs/monitor/ent/ta"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCTLog        = "CTLog"
	TypeEvidenceLog  = "EvidenceLog"
	TypeSubscription = "Subscription"
	TypeTA           = "TA"
)

// CTLogMutation represents an operation that mutates the CTLog nodes in the graph.
type CTLogMutation struct {
	config
	op                Op
	typ               string
	id                *int
	monitor_log_id    *int
	addmonitor_log_id *int
	clearedFields     map[string]struct{}
	ta                *int
	clearedta         bool
	done              bool
	oldValue          func(context.Context) (*CTLog, error)
	predicates        []predicate.CTLog
}

var _ ent.Mutation = (*CTLogMutation)(nil)

// ctlogOption allows management of the mutation configuration using functional options.
type ctlogOption func(*CTLogMutation)

// newCTLogMutation creates new mutation for the CTLog entity.
func newCTLogMutation(c config, op Op, opts ...ctlogOption) *CTLogMutation {
	m := &CTLogMutation{
		config:        c,
		op:            op,
		typ:           TypeCTLog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCTLogID sets the ID field of the mutation.
func withCTLogID(id int) ctlogOption {
	return func(m *CTLogMutation) {
		var (
			err   error
			once  sync.Once
			value *CTLog
		)
		m.oldValue = func(ctx context.Context) (*CTLog, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CTLog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCTLog sets the old CTLog of the mutation.
func withCTLog(node *CTLog) ctlogOption {
	return func(m *CTLogMutation) {
		m.oldValue = func(context.Context) (*CTLog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CTLogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CTLogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CTLogMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CTLogMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CTLog.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMonitorLogID sets the "monitor_log_id" field.
func (m *CTLogMutation) SetMonitorLogID(i int) {
	m.monitor_log_id = &i
	m.addmonitor_log_id = nil
}

// MonitorLogID returns the value of the "monitor_log_id" field in the mutation.
func (m *CTLogMutation) MonitorLogID() (r int, exists bool) {
	v := m.monitor_log_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMonitorLogID returns the old "monitor_log_id" field's value of the CTLog entity.
// If the CTLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CTLogMutation) OldMonitorLogID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMonitorLogID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMonitorLogID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMonitorLogID: %w", err)
	}
	return oldValue.MonitorLogID, nil
}

// AddMonitorLogID adds i to the "monitor_log_id" field.
func (m *CTLogMutation) AddMonitorLogID(i int) {
	if m.addmonitor_log_id != nil {
		*m.addmonitor_log_id += i
	} else {
		m.addmonitor_log_id = &i
	}
}

// AddedMonitorLogID returns the value that was added to the "monitor_log_id" field in this mutation.
func (m *CTLogMutation) AddedMonitorLogID() (r int, exists bool) {
	v := m.addmonitor_log_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetMonitorLogID resets all changes to the "monitor_log_id" field.
func (m *CTLogMutation) ResetMonitorLogID() {
	m.monitor_log_id = nil
	m.addmonitor_log_id = nil
}

// SetTaID sets the "ta" edge to the TA entity by id.
func (m *CTLogMutation) SetTaID(id int) {
	m.ta = &id
}

// ClearTa clears the "ta" edge to the TA entity.
func (m *CTLogMutation) ClearTa() {
	m.clearedta = true
}

// TaCleared reports if the "ta" edge to the TA entity was cleared.
func (m *CTLogMutation) TaCleared() bool {
	return m.clearedta
}

// TaID returns the "ta" edge ID in the mutation.
func (m *CTLogMutation) TaID() (id int, exists bool) {
	if m.ta != nil {
		return *m.ta, true
	}
	return
}

// TaIDs returns the "ta" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TaID instead. It exists only for internal usage by the builders.
func (m *CTLogMutation) TaIDs() (ids []int) {
	if id := m.ta; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTa resets all changes to the "ta" edge.
func (m *CTLogMutation) ResetTa() {
	m.ta = nil
	m.clearedta = false
}

// Where appends a list predicates to the CTLogMutation builder.
func (m *CTLogMutation) Where(ps ...predicate.CTLog) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CTLogMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CTLogMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CTLog, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CTLogMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CTLogMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CTLog).
func (m *CTLogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CTLogMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.monitor_log_id != nil {
		fields = append(fields, ctlog.FieldMonitorLogID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CTLogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ctlog.FieldMonitorLogID:
		return m.MonitorLogID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CTLogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ctlog.FieldMonitorLogID:
		return m.OldMonitorLogID(ctx)
	}
	return nil, fmt.Errorf("unknown CTLog field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CTLogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ctlog.FieldMonitorLogID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMonitorLogID(v)
		return nil
	}
	return fmt.Errorf("unknown CTLog field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CTLogMutation) AddedFields() []string {
	var fields []string
	if m.addmonitor_log_id != nil {
		fields = append(fields, ctlog.FieldMonitorLogID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CTLogMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case ctlog.FieldMonitorLogID:
		return m.AddedMonitorLogID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CTLogMutation) AddField(name string, value ent.Value) error {
	switch name {
	case ctlog.FieldMonitorLogID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMonitorLogID(v)
		return nil
	}
	return fmt.Errorf("unknown CTLog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CTLogMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CTLogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CTLogMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CTLog nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CTLogMutation) ResetField(name string) error {
	switch name {
	case ctlog.FieldMonitorLogID:
		m.ResetMonitorLogID()
		return nil
	}
	return fmt.Errorf("unknown CTLog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CTLogMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.ta != nil {
		edges = append(edges, ctlog.EdgeTa)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CTLogMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case ctlog.EdgeTa:
		if id := m.ta; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CTLogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CTLogMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CTLogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedta {
		edges = append(edges, ctlog.EdgeTa)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CTLogMutation) EdgeCleared(name string) bool {
	switch name {
	case ctlog.EdgeTa:
		return m.clearedta
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CTLogMutation) ClearEdge(name string) error {
	switch name {
	case ctlog.EdgeTa:
		m.ClearTa()
		return nil
	}
	return fmt.Errorf("unknown CTLog unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CTLogMutation) ResetEdge(name string) error {
	switch name {
	case ctlog.EdgeTa:
		m.ResetTa()
		return nil
	}
	return fmt.Errorf("unknown CTLog edge %s", name)
}

// EvidenceLogMutation represents an operation that mutates the EvidenceLog nodes in the graph.
type EvidenceLogMutation struct {
	config
	op            Op
	typ           string
	id            *int
	evidence      *string
	repository    *string
	commit_id     *string
	unique_id     *[]byte
	clearedFields map[string]struct{}
	ta            *int
	clearedta     bool
	done          bool
	oldValue      func(context.Context) (*EvidenceLog, error)
	predicates    []predicate.EvidenceLog
}

var _ ent.Mutation = (*EvidenceLogMutation)(nil)

// evidencelogOption allows management of the mutation configuration using functional options.
type evidencelogOption func(*EvidenceLogMutation)

// newEvidenceLogMutation creates new mutation for the EvidenceLog entity.
func newEvidenceLogMutation(c config, op Op, opts ...evidencelogOption) *EvidenceLogMutation {
	m := &EvidenceLogMutation{
		config:        c,
		op:            op,
		typ:           TypeEvidenceLog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEvidenceLogID sets the ID field of the mutation.
func withEvidenceLogID(id int) evidencelogOption {
	return func(m *EvidenceLogMutation) {
		var (
			err   error
			once  sync.Once
			value *EvidenceLog
		)
		m.oldValue = func(ctx context.Context) (*EvidenceLog, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EvidenceLog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEvidenceLog sets the old EvidenceLog of the mutation.
func withEvidenceLog(node *EvidenceLog) evidencelogOption {
	return func(m *EvidenceLogMutation) {
		m.oldValue = func(context.Context) (*EvidenceLog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EvidenceLogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EvidenceLogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EvidenceLogMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EvidenceLogMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EvidenceLog.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEvidence sets the "evidence" field.
func (m *EvidenceLogMutation) SetEvidence(s string) {
	m.evidence = &s
}

// Evidence returns the value of the "evidence" field in the mutation.
func (m *EvidenceLogMutation) Evidence() (r string, exists bool) {
	v := m.evidence
	if v == nil {
		return
	}
	return *v, true
}

// OldEvidence returns the old "evidence" field's value of the EvidenceLog entity.
// If the EvidenceLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EvidenceLogMutation) OldEvidence(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEvidence is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEvidence requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEvidence: %w", err)
	}
	return oldValue.Evidence, nil
}

// ResetEvidence resets all changes to the "evidence" field.
func (m *EvidenceLogMutation) ResetEvidence() {
	m.evidence = nil
}

// SetRepository sets the "repository" field.
func (m *EvidenceLogMutation) SetRepository(s string) {
	m.repository = &s
}

// Repository returns the value of the "repository" field in the mutation.
func (m *EvidenceLogMutation) Repository() (r string, exists bool) {
	v := m.repository
	if v == nil {
		return
	}
	return *v, true
}

// OldRepository returns the old "repository" field's value of the EvidenceLog entity.
// If the EvidenceLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EvidenceLogMutation) OldRepository(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRepository is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRepository requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRepository: %w", err)
	}
	return oldValue.Repository, nil
}

// ResetRepository resets all changes to the "repository" field.
func (m *EvidenceLogMutation) ResetRepository() {
	m.repository = nil
}

// SetCommitID sets the "commit_id" field.
func (m *EvidenceLogMutation) SetCommitID(s string) {
	m.commit_id = &s
}

// CommitID returns the value of the "commit_id" field in the mutation.
func (m *EvidenceLogMutation) CommitID() (r string, exists bool) {
	v := m.commit_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCommitID returns the old "commit_id" field's value of the EvidenceLog entity.
// If the EvidenceLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EvidenceLogMutation) OldCommitID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCommitID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCommitID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCommitID: %w", err)
	}
	return oldValue.CommitID, nil
}

// ResetCommitID resets all changes to the "commit_id" field.
func (m *EvidenceLogMutation) ResetCommitID() {
	m.commit_id = nil
}

// SetUniqueID sets the "unique_id" field.
func (m *EvidenceLogMutation) SetUniqueID(b []byte) {
	m.unique_id = &b
}

// UniqueID returns the value of the "unique_id" field in the mutation.
func (m *EvidenceLogMutation) UniqueID() (r []byte, exists bool) {
	v := m.unique_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUniqueID returns the old "unique_id" field's value of the EvidenceLog entity.
// If the EvidenceLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EvidenceLogMutation) OldUniqueID(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUniqueID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUniqueID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUniqueID: %w", err)
	}
	return oldValue.UniqueID, nil
}

// ResetUniqueID resets all changes to the "unique_id" field.
func (m *EvidenceLogMutation) ResetUniqueID() {
	m.unique_id = nil
}

// SetTaID sets the "ta" edge to the TA entity by id.
func (m *EvidenceLogMutation) SetTaID(id int) {
	m.ta = &id
}

// ClearTa clears the "ta" edge to the TA entity.
func (m *EvidenceLogMutation) ClearTa() {
	m.clearedta = true
}

// TaCleared reports if the "ta" edge to the TA entity was cleared.
func (m *EvidenceLogMutation) TaCleared() bool {
	return m.clearedta
}

// TaID returns the "ta" edge ID in the mutation.
func (m *EvidenceLogMutation) TaID() (id int, exists bool) {
	if m.ta != nil {
		return *m.ta, true
	}
	return
}

// TaIDs returns the "ta" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TaID instead. It exists only for internal usage by the builders.
func (m *EvidenceLogMutation) TaIDs() (ids []int) {
	if id := m.ta; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTa resets all changes to the "ta" edge.
func (m *EvidenceLogMutation) ResetTa() {
	m.ta = nil
	m.clearedta = false
}

// Where appends a list predicates to the EvidenceLogMutation builder.
func (m *EvidenceLogMutation) Where(ps ...predicate.EvidenceLog) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EvidenceLogMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EvidenceLogMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.EvidenceLog, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EvidenceLogMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EvidenceLogMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (EvidenceLog).
func (m *EvidenceLogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EvidenceLogMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.evidence != nil {
		fields = append(fields, evidencelog.FieldEvidence)
	}
	if m.repository != nil {
		fields = append(fields, evidencelog.FieldRepository)
	}
	if m.commit_id != nil {
		fields = append(fields, evidencelog.FieldCommitID)
	}
	if m.unique_id != nil {
		fields = append(fields, evidencelog.FieldUniqueID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EvidenceLogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case evidencelog.FieldEvidence:
		return m.Evidence()
	case evidencelog.FieldRepository:
		return m.Repository()
	case evidencelog.FieldCommitID:
		return m.CommitID()
	case evidencelog.FieldUniqueID:
		return m.UniqueID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EvidenceLogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case evidencelog.FieldEvidence:
		return m.OldEvidence(ctx)
	case evidencelog.FieldRepository:
		return m.OldRepository(ctx)
	case evidencelog.FieldCommitID:
		return m.OldCommitID(ctx)
	case evidencelog.FieldUniqueID:
		return m.OldUniqueID(ctx)
	}
	return nil, fmt.Errorf("unknown EvidenceLog field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EvidenceLogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case evidencelog.FieldEvidence:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEvidence(v)
		return nil
	case evidencelog.FieldRepository:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRepository(v)
		return nil
	case evidencelog.FieldCommitID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCommitID(v)
		return nil
	case evidencelog.FieldUniqueID:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUniqueID(v)
		return nil
	}
	return fmt.Errorf("unknown EvidenceLog field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EvidenceLogMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EvidenceLogMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EvidenceLogMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown EvidenceLog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EvidenceLogMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EvidenceLogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EvidenceLogMutation) ClearField(name string) error {
	return fmt.Errorf("unknown EvidenceLog nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EvidenceLogMutation) ResetField(name string) error {
	switch name {
	case evidencelog.FieldEvidence:
		m.ResetEvidence()
		return nil
	case evidencelog.FieldRepository:
		m.ResetRepository()
		return nil
	case evidencelog.FieldCommitID:
		m.ResetCommitID()
		return nil
	case evidencelog.FieldUniqueID:
		m.ResetUniqueID()
		return nil
	}
	return fmt.Errorf("unknown EvidenceLog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EvidenceLogMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.ta != nil {
		edges = append(edges, evidencelog.EdgeTa)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EvidenceLogMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case evidencelog.EdgeTa:
		if id := m.ta; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EvidenceLogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EvidenceLogMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EvidenceLogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedta {
		edges = append(edges, evidencelog.EdgeTa)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EvidenceLogMutation) EdgeCleared(name string) bool {
	switch name {
	case evidencelog.EdgeTa:
		return m.clearedta
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EvidenceLogMutation) ClearEdge(name string) error {
	switch name {
	case evidencelog.EdgeTa:
		m.ClearTa()
		return nil
	}
	return fmt.Errorf("unknown EvidenceLog unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EvidenceLogMutation) ResetEdge(name string) error {
	switch name {
	case evidencelog.EdgeTa:
		m.ResetTa()
		return nil
	}
	return fmt.Errorf("unknown EvidenceLog edge %s", name)
}

// SubscriptionMutation represents an operation that mutates the Subscription nodes in the graph.
type SubscriptionMutation struct {
	config
	op            Op
	typ           string
	id            *int
	endpoint      *string
	p256dh        *string
	auth          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Subscription, error)
	predicates    []predicate.Subscription
}

var _ ent.Mutation = (*SubscriptionMutation)(nil)

// subscriptionOption allows management of the mutation configuration using functional options.
type subscriptionOption func(*SubscriptionMutation)

// newSubscriptionMutation creates new mutation for the Subscription entity.
func newSubscriptionMutation(c config, op Op, opts ...subscriptionOption) *SubscriptionMutation {
	m := &SubscriptionMutation{
		config:        c,
		op:            op,
		typ:           TypeSubscription,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSubscriptionID sets the ID field of the mutation.
func withSubscriptionID(id int) subscriptionOption {
	return func(m *SubscriptionMutation) {
		var (
			err   error
			once  sync.Once
			value *Subscription
		)
		m.oldValue = func(ctx context.Context) (*Subscription, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Subscription.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSubscription sets the old Subscription of the mutation.
func withSubscription(node *Subscription) subscriptionOption {
	return func(m *SubscriptionMutation) {
		m.oldValue = func(context.Context) (*Subscription, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SubscriptionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SubscriptionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SubscriptionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SubscriptionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Subscription.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEndpoint sets the "endpoint" field.
func (m *SubscriptionMutation) SetEndpoint(s string) {
	m.endpoint = &s
}

// Endpoint returns the value of the "endpoint" field in the mutation.
func (m *SubscriptionMutation) Endpoint() (r string, exists bool) {
	v := m.endpoint
	if v == nil {
		return
	}
	return *v, true
}

// OldEndpoint returns the old "endpoint" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldEndpoint(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndpoint is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndpoint requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndpoint: %w", err)
	}
	return oldValue.Endpoint, nil
}

// ResetEndpoint resets all changes to the "endpoint" field.
func (m *SubscriptionMutation) ResetEndpoint() {
	m.endpoint = nil
}

// SetP256dh sets the "p256dh" field.
func (m *SubscriptionMutation) SetP256dh(s string) {
	m.p256dh = &s
}

// P256dh returns the value of the "p256dh" field in the mutation.
func (m *SubscriptionMutation) P256dh() (r string, exists bool) {
	v := m.p256dh
	if v == nil {
		return
	}
	return *v, true
}

// OldP256dh returns the old "p256dh" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldP256dh(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldP256dh is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldP256dh requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldP256dh: %w", err)
	}
	return oldValue.P256dh, nil
}

// ResetP256dh resets all changes to the "p256dh" field.
func (m *SubscriptionMutation) ResetP256dh() {
	m.p256dh = nil
}

// SetAuth sets the "auth" field.
func (m *SubscriptionMutation) SetAuth(s string) {
	m.auth = &s
}

// Auth returns the value of the "auth" field in the mutation.
func (m *SubscriptionMutation) Auth() (r string, exists bool) {
	v := m.auth
	if v == nil {
		return
	}
	return *v, true
}

// OldAuth returns the old "auth" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldAuth(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuth: %w", err)
	}
	return oldValue.Auth, nil
}

// ResetAuth resets all changes to the "auth" field.
func (m *SubscriptionMutation) ResetAuth() {
	m.auth = nil
}

// Where appends a list predicates to the SubscriptionMutation builder.
func (m *SubscriptionMutation) Where(ps ...predicate.Subscription) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SubscriptionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SubscriptionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Subscription, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SubscriptionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SubscriptionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Subscription).
func (m *SubscriptionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SubscriptionMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.endpoint != nil {
		fields = append(fields, subscription.FieldEndpoint)
	}
	if m.p256dh != nil {
		fields = append(fields, subscription.FieldP256dh)
	}
	if m.auth != nil {
		fields = append(fields, subscription.FieldAuth)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SubscriptionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case subscription.FieldEndpoint:
		return m.Endpoint()
	case subscription.FieldP256dh:
		return m.P256dh()
	case subscription.FieldAuth:
		return m.Auth()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SubscriptionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case subscription.FieldEndpoint:
		return m.OldEndpoint(ctx)
	case subscription.FieldP256dh:
		return m.OldP256dh(ctx)
	case subscription.FieldAuth:
		return m.OldAuth(ctx)
	}
	return nil, fmt.Errorf("unknown Subscription field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubscriptionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case subscription.FieldEndpoint:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndpoint(v)
		return nil
	case subscription.FieldP256dh:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetP256dh(v)
		return nil
	case subscription.FieldAuth:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuth(v)
		return nil
	}
	return fmt.Errorf("unknown Subscription field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SubscriptionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SubscriptionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubscriptionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Subscription numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SubscriptionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SubscriptionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SubscriptionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Subscription nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SubscriptionMutation) ResetField(name string) error {
	switch name {
	case subscription.FieldEndpoint:
		m.ResetEndpoint()
		return nil
	case subscription.FieldP256dh:
		m.ResetP256dh()
		return nil
	case subscription.FieldAuth:
		m.ResetAuth()
		return nil
	}
	return fmt.Errorf("unknown Subscription field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SubscriptionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SubscriptionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SubscriptionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SubscriptionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SubscriptionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SubscriptionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SubscriptionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Subscription unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SubscriptionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Subscription edge %s", name)
}

// TAMutation represents an operation that mutates the TA nodes in the graph.
type TAMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	public_key          *[]byte
	is_active           *bool
	clearedFields       map[string]struct{}
	ct_log              map[int]struct{}
	removedct_log       map[int]struct{}
	clearedct_log       bool
	evidence_log        *int
	clearedevidence_log bool
	done                bool
	oldValue            func(context.Context) (*TA, error)
	predicates          []predicate.TA
}

var _ ent.Mutation = (*TAMutation)(nil)

// taOption allows management of the mutation configuration using functional options.
type taOption func(*TAMutation)

// newTAMutation creates new mutation for the TA entity.
func newTAMutation(c config, op Op, opts ...taOption) *TAMutation {
	m := &TAMutation{
		config:        c,
		op:            op,
		typ:           TypeTA,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTAID sets the ID field of the mutation.
func withTAID(id int) taOption {
	return func(m *TAMutation) {
		var (
			err   error
			once  sync.Once
			value *TA
		)
		m.oldValue = func(ctx context.Context) (*TA, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TA.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTA sets the old TA of the mutation.
func withTA(node *TA) taOption {
	return func(m *TAMutation) {
		m.oldValue = func(context.Context) (*TA, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TAMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TAMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TAMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TAMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TA.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPublicKey sets the "public_key" field.
func (m *TAMutation) SetPublicKey(b []byte) {
	m.public_key = &b
}

// PublicKey returns the value of the "public_key" field in the mutation.
func (m *TAMutation) PublicKey() (r []byte, exists bool) {
	v := m.public_key
	if v == nil {
		return
	}
	return *v, true
}

// OldPublicKey returns the old "public_key" field's value of the TA entity.
// If the TA object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TAMutation) OldPublicKey(ctx context.Context) (v *[]byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublicKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublicKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublicKey: %w", err)
	}
	return oldValue.PublicKey, nil
}

// ResetPublicKey resets all changes to the "public_key" field.
func (m *TAMutation) ResetPublicKey() {
	m.public_key = nil
}

// SetIsActive sets the "is_active" field.
func (m *TAMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *TAMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the TA entity.
// If the TA object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TAMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *TAMutation) ResetIsActive() {
	m.is_active = nil
}

// AddCtLogIDs adds the "ct_log" edge to the CTLog entity by ids.
func (m *TAMutation) AddCtLogIDs(ids ...int) {
	if m.ct_log == nil {
		m.ct_log = make(map[int]struct{})
	}
	for i := range ids {
		m.ct_log[ids[i]] = struct{}{}
	}
}

// ClearCtLog clears the "ct_log" edge to the CTLog entity.
func (m *TAMutation) ClearCtLog() {
	m.clearedct_log = true
}

// CtLogCleared reports if the "ct_log" edge to the CTLog entity was cleared.
func (m *TAMutation) CtLogCleared() bool {
	return m.clearedct_log
}

// RemoveCtLogIDs removes the "ct_log" edge to the CTLog entity by IDs.
func (m *TAMutation) RemoveCtLogIDs(ids ...int) {
	if m.removedct_log == nil {
		m.removedct_log = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.ct_log, ids[i])
		m.removedct_log[ids[i]] = struct{}{}
	}
}

// RemovedCtLog returns the removed IDs of the "ct_log" edge to the CTLog entity.
func (m *TAMutation) RemovedCtLogIDs() (ids []int) {
	for id := range m.removedct_log {
		ids = append(ids, id)
	}
	return
}

// CtLogIDs returns the "ct_log" edge IDs in the mutation.
func (m *TAMutation) CtLogIDs() (ids []int) {
	for id := range m.ct_log {
		ids = append(ids, id)
	}
	return
}

// ResetCtLog resets all changes to the "ct_log" edge.
func (m *TAMutation) ResetCtLog() {
	m.ct_log = nil
	m.clearedct_log = false
	m.removedct_log = nil
}

// SetEvidenceLogID sets the "evidence_log" edge to the EvidenceLog entity by id.
func (m *TAMutation) SetEvidenceLogID(id int) {
	m.evidence_log = &id
}

// ClearEvidenceLog clears the "evidence_log" edge to the EvidenceLog entity.
func (m *TAMutation) ClearEvidenceLog() {
	m.clearedevidence_log = true
}

// EvidenceLogCleared reports if the "evidence_log" edge to the EvidenceLog entity was cleared.
func (m *TAMutation) EvidenceLogCleared() bool {
	return m.clearedevidence_log
}

// EvidenceLogID returns the "evidence_log" edge ID in the mutation.
func (m *TAMutation) EvidenceLogID() (id int, exists bool) {
	if m.evidence_log != nil {
		return *m.evidence_log, true
	}
	return
}

// EvidenceLogIDs returns the "evidence_log" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EvidenceLogID instead. It exists only for internal usage by the builders.
func (m *TAMutation) EvidenceLogIDs() (ids []int) {
	if id := m.evidence_log; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEvidenceLog resets all changes to the "evidence_log" edge.
func (m *TAMutation) ResetEvidenceLog() {
	m.evidence_log = nil
	m.clearedevidence_log = false
}

// Where appends a list predicates to the TAMutation builder.
func (m *TAMutation) Where(ps ...predicate.TA) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TAMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TAMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TA, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TAMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TAMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TA).
func (m *TAMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TAMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.public_key != nil {
		fields = append(fields, ta.FieldPublicKey)
	}
	if m.is_active != nil {
		fields = append(fields, ta.FieldIsActive)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TAMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ta.FieldPublicKey:
		return m.PublicKey()
	case ta.FieldIsActive:
		return m.IsActive()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TAMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ta.FieldPublicKey:
		return m.OldPublicKey(ctx)
	case ta.FieldIsActive:
		return m.OldIsActive(ctx)
	}
	return nil, fmt.Errorf("unknown TA field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TAMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ta.FieldPublicKey:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublicKey(v)
		return nil
	case ta.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	}
	return fmt.Errorf("unknown TA field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TAMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TAMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TAMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TA numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TAMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TAMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TAMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TA nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TAMutation) ResetField(name string) error {
	switch name {
	case ta.FieldPublicKey:
		m.ResetPublicKey()
		return nil
	case ta.FieldIsActive:
		m.ResetIsActive()
		return nil
	}
	return fmt.Errorf("unknown TA field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TAMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.ct_log != nil {
		edges = append(edges, ta.EdgeCtLog)
	}
	if m.evidence_log != nil {
		edges = append(edges, ta.EdgeEvidenceLog)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TAMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case ta.EdgeCtLog:
		ids := make([]ent.Value, 0, len(m.ct_log))
		for id := range m.ct_log {
			ids = append(ids, id)
		}
		return ids
	case ta.EdgeEvidenceLog:
		if id := m.evidence_log; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TAMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedct_log != nil {
		edges = append(edges, ta.EdgeCtLog)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TAMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case ta.EdgeCtLog:
		ids := make([]ent.Value, 0, len(m.removedct_log))
		for id := range m.removedct_log {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TAMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedct_log {
		edges = append(edges, ta.EdgeCtLog)
	}
	if m.clearedevidence_log {
		edges = append(edges, ta.EdgeEvidenceLog)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TAMutation) EdgeCleared(name string) bool {
	switch name {
	case ta.EdgeCtLog:
		return m.clearedct_log
	case ta.EdgeEvidenceLog:
		return m.clearedevidence_log
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TAMutation) ClearEdge(name string) error {
	switch name {
	case ta.EdgeEvidenceLog:
		m.ClearEvidenceLog()
		return nil
	}
	return fmt.Errorf("unknown TA unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TAMutation) ResetEdge(name string) error {
	switch name {
	case ta.EdgeCtLog:
		m.ResetCtLog()
		return nil
	case ta.EdgeEvidenceLog:
		m.ResetEvidenceLog()
		return nil
	}
	return fmt.Errorf("unknown TA edge %s", name)
}
