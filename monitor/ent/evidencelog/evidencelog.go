// Code generated by ent, DO NOT EDIT.

package evidencelog

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the evidencelog type in the database.
	Label = "evidence_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEvidence holds the string denoting the evidence field in the database.
	FieldEvidence = "evidence"
	// FieldRepository holds the string denoting the repository field in the database.
	FieldRepository = "repository"
	// FieldCommitID holds the string denoting the commit_id field in the database.
	FieldCommitID = "commit_id"
	// FieldUniqueID holds the string denoting the unique_id field in the database.
	FieldUniqueID = "unique_id"
	// EdgeTa holds the string denoting the ta edge name in mutations.
	EdgeTa = "ta"
	// Table holds the table name of the evidencelog in the database.
	Table = "evidence_logs"
	// TaTable is the table that holds the ta relation/edge.
	TaTable = "tas"
	// TaInverseTable is the table name for the TA entity.
	// It exists in this package in order to avoid circular dependency with the "ta" package.
	TaInverseTable = "tas"
	// TaColumn is the table column denoting the ta relation/edge.
	TaColumn = "evidence_log_ta"
)

// Columns holds all SQL columns for evidencelog fields.
var Columns = []string{
	FieldID,
	FieldEvidence,
	FieldRepository,
	FieldCommitID,
	FieldUniqueID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the EvidenceLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEvidence orders the results by the evidence field.
func ByEvidence(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEvidence, opts...).ToFunc()
}

// ByRepository orders the results by the repository field.
func ByRepository(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRepository, opts...).ToFunc()
}

// ByCommitID orders the results by the commit_id field.
func ByCommitID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommitID, opts...).ToFunc()
}

// ByTaField orders the results by ta field.
func ByTaField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaStep(), sql.OrderByField(field, opts...))
	}
}
func newTaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, TaTable, TaColumn),
	)
}
