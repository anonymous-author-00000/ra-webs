// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/anonymous-author-00000/ra-webs/monitor/ent/ctlog"
	"github.com/anonymous-author-00000/ra-webs/monitor/ent/predicate"
	"github.com/anonymous-author-00000/ra-webs/monitor/ent/ta"
)

// CTLogUpdate is the builder for updating CTLog entities.
type CTLogUpdate struct {
	config
	hooks    []Hook
	mutation *CTLogMutation
}

// Where appends a list predicates to the CTLogUpdate builder.
func (clu *CTLogUpdate) Where(ps ...predicate.CTLog) *CTLogUpdate {
	clu.mutation.Where(ps...)
	return clu
}

// SetMonitorLogID sets the "monitor_log_id" field.
func (clu *CTLogUpdate) SetMonitorLogID(i int) *CTLogUpdate {
	clu.mutation.ResetMonitorLogID()
	clu.mutation.SetMonitorLogID(i)
	return clu
}

// SetNillableMonitorLogID sets the "monitor_log_id" field if the given value is not nil.
func (clu *CTLogUpdate) SetNillableMonitorLogID(i *int) *CTLogUpdate {
	if i != nil {
		clu.SetMonitorLogID(*i)
	}
	return clu
}

// AddMonitorLogID adds i to the "monitor_log_id" field.
func (clu *CTLogUpdate) AddMonitorLogID(i int) *CTLogUpdate {
	clu.mutation.AddMonitorLogID(i)
	return clu
}

// SetTaID sets the "ta" edge to the TA entity by ID.
func (clu *CTLogUpdate) SetTaID(id int) *CTLogUpdate {
	clu.mutation.SetTaID(id)
	return clu
}

// SetNillableTaID sets the "ta" edge to the TA entity by ID if the given value is not nil.
func (clu *CTLogUpdate) SetNillableTaID(id *int) *CTLogUpdate {
	if id != nil {
		clu = clu.SetTaID(*id)
	}
	return clu
}

// SetTa sets the "ta" edge to the TA entity.
func (clu *CTLogUpdate) SetTa(t *TA) *CTLogUpdate {
	return clu.SetTaID(t.ID)
}

// Mutation returns the CTLogMutation object of the builder.
func (clu *CTLogUpdate) Mutation() *CTLogMutation {
	return clu.mutation
}

// ClearTa clears the "ta" edge to the TA entity.
func (clu *CTLogUpdate) ClearTa() *CTLogUpdate {
	clu.mutation.ClearTa()
	return clu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (clu *CTLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, clu.sqlSave, clu.mutation, clu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (clu *CTLogUpdate) SaveX(ctx context.Context) int {
	affected, err := clu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (clu *CTLogUpdate) Exec(ctx context.Context) error {
	_, err := clu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clu *CTLogUpdate) ExecX(ctx context.Context) {
	if err := clu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (clu *CTLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(ctlog.Table, ctlog.Columns, sqlgraph.NewFieldSpec(ctlog.FieldID, field.TypeInt))
	if ps := clu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := clu.mutation.MonitorLogID(); ok {
		_spec.SetField(ctlog.FieldMonitorLogID, field.TypeInt, value)
	}
	if value, ok := clu.mutation.AddedMonitorLogID(); ok {
		_spec.AddField(ctlog.FieldMonitorLogID, field.TypeInt, value)
	}
	if clu.mutation.TaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ctlog.TaTable,
			Columns: []string{ctlog.TaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ta.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clu.mutation.TaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ctlog.TaTable,
			Columns: []string{ctlog.TaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ta.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, clu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ctlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	clu.mutation.done = true
	return n, nil
}

// CTLogUpdateOne is the builder for updating a single CTLog entity.
type CTLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CTLogMutation
}

// SetMonitorLogID sets the "monitor_log_id" field.
func (cluo *CTLogUpdateOne) SetMonitorLogID(i int) *CTLogUpdateOne {
	cluo.mutation.ResetMonitorLogID()
	cluo.mutation.SetMonitorLogID(i)
	return cluo
}

// SetNillableMonitorLogID sets the "monitor_log_id" field if the given value is not nil.
func (cluo *CTLogUpdateOne) SetNillableMonitorLogID(i *int) *CTLogUpdateOne {
	if i != nil {
		cluo.SetMonitorLogID(*i)
	}
	return cluo
}

// AddMonitorLogID adds i to the "monitor_log_id" field.
func (cluo *CTLogUpdateOne) AddMonitorLogID(i int) *CTLogUpdateOne {
	cluo.mutation.AddMonitorLogID(i)
	return cluo
}

// SetTaID sets the "ta" edge to the TA entity by ID.
func (cluo *CTLogUpdateOne) SetTaID(id int) *CTLogUpdateOne {
	cluo.mutation.SetTaID(id)
	return cluo
}

// SetNillableTaID sets the "ta" edge to the TA entity by ID if the given value is not nil.
func (cluo *CTLogUpdateOne) SetNillableTaID(id *int) *CTLogUpdateOne {
	if id != nil {
		cluo = cluo.SetTaID(*id)
	}
	return cluo
}

// SetTa sets the "ta" edge to the TA entity.
func (cluo *CTLogUpdateOne) SetTa(t *TA) *CTLogUpdateOne {
	return cluo.SetTaID(t.ID)
}

// Mutation returns the CTLogMutation object of the builder.
func (cluo *CTLogUpdateOne) Mutation() *CTLogMutation {
	return cluo.mutation
}

// ClearTa clears the "ta" edge to the TA entity.
func (cluo *CTLogUpdateOne) ClearTa() *CTLogUpdateOne {
	cluo.mutation.ClearTa()
	return cluo
}

// Where appends a list predicates to the CTLogUpdate builder.
func (cluo *CTLogUpdateOne) Where(ps ...predicate.CTLog) *CTLogUpdateOne {
	cluo.mutation.Where(ps...)
	return cluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cluo *CTLogUpdateOne) Select(field string, fields ...string) *CTLogUpdateOne {
	cluo.fields = append([]string{field}, fields...)
	return cluo
}

// Save executes the query and returns the updated CTLog entity.
func (cluo *CTLogUpdateOne) Save(ctx context.Context) (*CTLog, error) {
	return withHooks(ctx, cluo.sqlSave, cluo.mutation, cluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cluo *CTLogUpdateOne) SaveX(ctx context.Context) *CTLog {
	node, err := cluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cluo *CTLogUpdateOne) Exec(ctx context.Context) error {
	_, err := cluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cluo *CTLogUpdateOne) ExecX(ctx context.Context) {
	if err := cluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cluo *CTLogUpdateOne) sqlSave(ctx context.Context) (_node *CTLog, err error) {
	_spec := sqlgraph.NewUpdateSpec(ctlog.Table, ctlog.Columns, sqlgraph.NewFieldSpec(ctlog.FieldID, field.TypeInt))
	id, ok := cluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CTLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ctlog.FieldID)
		for _, f := range fields {
			if !ctlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ctlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cluo.mutation.MonitorLogID(); ok {
		_spec.SetField(ctlog.FieldMonitorLogID, field.TypeInt, value)
	}
	if value, ok := cluo.mutation.AddedMonitorLogID(); ok {
		_spec.AddField(ctlog.FieldMonitorLogID, field.TypeInt, value)
	}
	if cluo.mutation.TaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ctlog.TaTable,
			Columns: []string{ctlog.TaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ta.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cluo.mutation.TaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ctlog.TaTable,
			Columns: []string{ctlog.TaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ta.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CTLog{config: cluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ctlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cluo.mutation.done = true
	return _node, nil
}
