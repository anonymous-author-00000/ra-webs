// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/anonymous-author-00000/ra-webs/monitor/ent/ctlog"
	"github.com/anonymous-author-00000/ra-webs/monitor/ent/evidencelog"
	"github.com/anonymous-author-00000/ra-webs/monitor/ent/ta"
)

// TACreate is the builder for creating a TA entity.
type TACreate struct {
	config
	mutation *TAMutation
	hooks    []Hook
}

// SetPublicKey sets the "public_key" field.
func (tc *TACreate) SetPublicKey(b []byte) *TACreate {
	tc.mutation.SetPublicKey(b)
	return tc
}

// SetIsActive sets the "is_active" field.
func (tc *TACreate) SetIsActive(b bool) *TACreate {
	tc.mutation.SetIsActive(b)
	return tc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (tc *TACreate) SetNillableIsActive(b *bool) *TACreate {
	if b != nil {
		tc.SetIsActive(*b)
	}
	return tc
}

// AddCtLogIDs adds the "ct_log" edge to the CTLog entity by IDs.
func (tc *TACreate) AddCtLogIDs(ids ...int) *TACreate {
	tc.mutation.AddCtLogIDs(ids...)
	return tc
}

// AddCtLog adds the "ct_log" edges to the CTLog entity.
func (tc *TACreate) AddCtLog(c ...*CTLog) *TACreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tc.AddCtLogIDs(ids...)
}

// SetEvidenceLogID sets the "evidence_log" edge to the EvidenceLog entity by ID.
func (tc *TACreate) SetEvidenceLogID(id int) *TACreate {
	tc.mutation.SetEvidenceLogID(id)
	return tc
}

// SetNillableEvidenceLogID sets the "evidence_log" edge to the EvidenceLog entity by ID if the given value is not nil.
func (tc *TACreate) SetNillableEvidenceLogID(id *int) *TACreate {
	if id != nil {
		tc = tc.SetEvidenceLogID(*id)
	}
	return tc
}

// SetEvidenceLog sets the "evidence_log" edge to the EvidenceLog entity.
func (tc *TACreate) SetEvidenceLog(e *EvidenceLog) *TACreate {
	return tc.SetEvidenceLogID(e.ID)
}

// Mutation returns the TAMutation object of the builder.
func (tc *TACreate) Mutation() *TAMutation {
	return tc.mutation
}

// Save creates the TA in the database.
func (tc *TACreate) Save(ctx context.Context) (*TA, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TACreate) SaveX(ctx context.Context) *TA {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TACreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TACreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TACreate) defaults() {
	if _, ok := tc.mutation.IsActive(); !ok {
		v := ta.DefaultIsActive
		tc.mutation.SetIsActive(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TACreate) check() error {
	if _, ok := tc.mutation.PublicKey(); !ok {
		return &ValidationError{Name: "public_key", err: errors.New(`ent: missing required field "TA.public_key"`)}
	}
	if _, ok := tc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "TA.is_active"`)}
	}
	return nil
}

func (tc *TACreate) sqlSave(ctx context.Context) (*TA, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TACreate) createSpec() (*TA, *sqlgraph.CreateSpec) {
	var (
		_node = &TA{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(ta.Table, sqlgraph.NewFieldSpec(ta.FieldID, field.TypeInt))
	)
	if value, ok := tc.mutation.PublicKey(); ok {
		_spec.SetField(ta.FieldPublicKey, field.TypeBytes, value)
		_node.PublicKey = &value
	}
	if value, ok := tc.mutation.IsActive(); ok {
		_spec.SetField(ta.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if nodes := tc.mutation.CtLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ta.CtLogTable,
			Columns: []string{ta.CtLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ctlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.EvidenceLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ta.EvidenceLogTable,
			Columns: []string{ta.EvidenceLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidencelog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.evidence_log_ta = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TACreateBulk is the builder for creating many TA entities in bulk.
type TACreateBulk struct {
	config
	err      error
	builders []*TACreate
}

// Save creates the TA entities in the database.
func (tcb *TACreateBulk) Save(ctx context.Context) ([]*TA, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*TA, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TAMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TACreateBulk) SaveX(ctx context.Context) []*TA {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TACreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TACreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
