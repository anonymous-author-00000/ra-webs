// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/anonymous-author-00000/ra-webs/monitor/ent/evidencelog"
	"github.com/anonymous-author-00000/ra-webs/monitor/ent/ta"
)

// EvidenceLog is the model entity for the EvidenceLog schema.
type EvidenceLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Evidence holds the value of the "evidence" field.
	Evidence string `json:"evidence,omitempty"`
	// Repository holds the value of the "repository" field.
	Repository string `json:"repository,omitempty"`
	// CommitID holds the value of the "commit_id" field.
	CommitID string `json:"commit_id,omitempty"`
	// UniqueID holds the value of the "unique_id" field.
	UniqueID []byte `json:"unique_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EvidenceLogQuery when eager-loading is set.
	Edges        EvidenceLogEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EvidenceLogEdges holds the relations/edges for other nodes in the graph.
type EvidenceLogEdges struct {
	// Ta holds the value of the ta edge.
	Ta *TA `json:"ta,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TaOrErr returns the Ta value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EvidenceLogEdges) TaOrErr() (*TA, error) {
	if e.Ta != nil {
		return e.Ta, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: ta.Label}
	}
	return nil, &NotLoadedError{edge: "ta"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EvidenceLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case evidencelog.FieldUniqueID:
			values[i] = new([]byte)
		case evidencelog.FieldID:
			values[i] = new(sql.NullInt64)
		case evidencelog.FieldEvidence, evidencelog.FieldRepository, evidencelog.FieldCommitID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EvidenceLog fields.
func (el *EvidenceLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case evidencelog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			el.ID = int(value.Int64)
		case evidencelog.FieldEvidence:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field evidence", values[i])
			} else if value.Valid {
				el.Evidence = value.String
			}
		case evidencelog.FieldRepository:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field repository", values[i])
			} else if value.Valid {
				el.Repository = value.String
			}
		case evidencelog.FieldCommitID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field commit_id", values[i])
			} else if value.Valid {
				el.CommitID = value.String
			}
		case evidencelog.FieldUniqueID:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field unique_id", values[i])
			} else if value != nil {
				el.UniqueID = *value
			}
		default:
			el.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EvidenceLog.
// This includes values selected through modifiers, order, etc.
func (el *EvidenceLog) Value(name string) (ent.Value, error) {
	return el.selectValues.Get(name)
}

// QueryTa queries the "ta" edge of the EvidenceLog entity.
func (el *EvidenceLog) QueryTa() *TAQuery {
	return NewEvidenceLogClient(el.config).QueryTa(el)
}

// Update returns a builder for updating this EvidenceLog.
// Note that you need to call EvidenceLog.Unwrap() before calling this method if this EvidenceLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (el *EvidenceLog) Update() *EvidenceLogUpdateOne {
	return NewEvidenceLogClient(el.config).UpdateOne(el)
}

// Unwrap unwraps the EvidenceLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (el *EvidenceLog) Unwrap() *EvidenceLog {
	_tx, ok := el.config.driver.(*txDriver)
	if !ok {
		panic("ent: EvidenceLog is not a transactional entity")
	}
	el.config.driver = _tx.drv
	return el
}

// String implements the fmt.Stringer.
func (el *EvidenceLog) String() string {
	var builder strings.Builder
	builder.WriteString("EvidenceLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", el.ID))
	builder.WriteString("evidence=")
	builder.WriteString(el.Evidence)
	builder.WriteString(", ")
	builder.WriteString("repository=")
	builder.WriteString(el.Repository)
	builder.WriteString(", ")
	builder.WriteString("commit_id=")
	builder.WriteString(el.CommitID)
	builder.WriteString(", ")
	builder.WriteString("unique_id=")
	builder.WriteString(fmt.Sprintf("%v", el.UniqueID))
	builder.WriteByte(')')
	return builder.String()
}

// EvidenceLogs is a parsable slice of EvidenceLog.
type EvidenceLogs []*EvidenceLog
