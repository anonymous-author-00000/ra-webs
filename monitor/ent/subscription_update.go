// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/anonymous-author-00000/ra-webs/monitor/ent/predicate"
	"github.com/anonymous-author-00000/ra-webs/monitor/ent/subscription"
)

// SubscriptionUpdate is the builder for updating Subscription entities.
type SubscriptionUpdate struct {
	config
	hooks    []Hook
	mutation *SubscriptionMutation
}

// Where appends a list predicates to the SubscriptionUpdate builder.
func (su *SubscriptionUpdate) Where(ps ...predicate.Subscription) *SubscriptionUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetEndpoint sets the "endpoint" field.
func (su *SubscriptionUpdate) SetEndpoint(s string) *SubscriptionUpdate {
	su.mutation.SetEndpoint(s)
	return su
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableEndpoint(s *string) *SubscriptionUpdate {
	if s != nil {
		su.SetEndpoint(*s)
	}
	return su
}

// SetP256dh sets the "p256dh" field.
func (su *SubscriptionUpdate) SetP256dh(s string) *SubscriptionUpdate {
	su.mutation.SetP256dh(s)
	return su
}

// SetNillableP256dh sets the "p256dh" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableP256dh(s *string) *SubscriptionUpdate {
	if s != nil {
		su.SetP256dh(*s)
	}
	return su
}

// SetAuth sets the "auth" field.
func (su *SubscriptionUpdate) SetAuth(s string) *SubscriptionUpdate {
	su.mutation.SetAuth(s)
	return su
}

// SetNillableAuth sets the "auth" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableAuth(s *string) *SubscriptionUpdate {
	if s != nil {
		su.SetAuth(*s)
	}
	return su
}

// Mutation returns the SubscriptionMutation object of the builder.
func (su *SubscriptionUpdate) Mutation() *SubscriptionMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SubscriptionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubscriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubscriptionUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubscriptionUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SubscriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(subscription.Table, subscription.Columns, sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Endpoint(); ok {
		_spec.SetField(subscription.FieldEndpoint, field.TypeString, value)
	}
	if value, ok := su.mutation.P256dh(); ok {
		_spec.SetField(subscription.FieldP256dh, field.TypeString, value)
	}
	if value, ok := su.mutation.Auth(); ok {
		_spec.SetField(subscription.FieldAuth, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SubscriptionUpdateOne is the builder for updating a single Subscription entity.
type SubscriptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubscriptionMutation
}

// SetEndpoint sets the "endpoint" field.
func (suo *SubscriptionUpdateOne) SetEndpoint(s string) *SubscriptionUpdateOne {
	suo.mutation.SetEndpoint(s)
	return suo
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableEndpoint(s *string) *SubscriptionUpdateOne {
	if s != nil {
		suo.SetEndpoint(*s)
	}
	return suo
}

// SetP256dh sets the "p256dh" field.
func (suo *SubscriptionUpdateOne) SetP256dh(s string) *SubscriptionUpdateOne {
	suo.mutation.SetP256dh(s)
	return suo
}

// SetNillableP256dh sets the "p256dh" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableP256dh(s *string) *SubscriptionUpdateOne {
	if s != nil {
		suo.SetP256dh(*s)
	}
	return suo
}

// SetAuth sets the "auth" field.
func (suo *SubscriptionUpdateOne) SetAuth(s string) *SubscriptionUpdateOne {
	suo.mutation.SetAuth(s)
	return suo
}

// SetNillableAuth sets the "auth" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableAuth(s *string) *SubscriptionUpdateOne {
	if s != nil {
		suo.SetAuth(*s)
	}
	return suo
}

// Mutation returns the SubscriptionMutation object of the builder.
func (suo *SubscriptionUpdateOne) Mutation() *SubscriptionMutation {
	return suo.mutation
}

// Where appends a list predicates to the SubscriptionUpdate builder.
func (suo *SubscriptionUpdateOne) Where(ps ...predicate.Subscription) *SubscriptionUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SubscriptionUpdateOne) Select(field string, fields ...string) *SubscriptionUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Subscription entity.
func (suo *SubscriptionUpdateOne) Save(ctx context.Context) (*Subscription, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubscriptionUpdateOne) SaveX(ctx context.Context) *Subscription {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SubscriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubscriptionUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SubscriptionUpdateOne) sqlSave(ctx context.Context) (_node *Subscription, err error) {
	_spec := sqlgraph.NewUpdateSpec(subscription.Table, subscription.Columns, sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Subscription.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscription.FieldID)
		for _, f := range fields {
			if !subscription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subscription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Endpoint(); ok {
		_spec.SetField(subscription.FieldEndpoint, field.TypeString, value)
	}
	if value, ok := suo.mutation.P256dh(); ok {
		_spec.SetField(subscription.FieldP256dh, field.TypeString, value)
	}
	if value, ok := suo.mutation.Auth(); ok {
		_spec.SetField(subscription.FieldAuth, field.TypeString, value)
	}
	_node = &Subscription{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
