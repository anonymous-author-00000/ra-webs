// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/anonymous-author-00000/ra-webs/monitor/ent/ctlog"
	"github.com/anonymous-author-00000/ra-webs/monitor/ent/ta"
)

// CTLogCreate is the builder for creating a CTLog entity.
type CTLogCreate struct {
	config
	mutation *CTLogMutation
	hooks    []Hook
}

// SetMonitorLogID sets the "monitor_log_id" field.
func (clc *CTLogCreate) SetMonitorLogID(i int) *CTLogCreate {
	clc.mutation.SetMonitorLogID(i)
	return clc
}

// SetTaID sets the "ta" edge to the TA entity by ID.
func (clc *CTLogCreate) SetTaID(id int) *CTLogCreate {
	clc.mutation.SetTaID(id)
	return clc
}

// SetNillableTaID sets the "ta" edge to the TA entity by ID if the given value is not nil.
func (clc *CTLogCreate) SetNillableTaID(id *int) *CTLogCreate {
	if id != nil {
		clc = clc.SetTaID(*id)
	}
	return clc
}

// SetTa sets the "ta" edge to the TA entity.
func (clc *CTLogCreate) SetTa(t *TA) *CTLogCreate {
	return clc.SetTaID(t.ID)
}

// Mutation returns the CTLogMutation object of the builder.
func (clc *CTLogCreate) Mutation() *CTLogMutation {
	return clc.mutation
}

// Save creates the CTLog in the database.
func (clc *CTLogCreate) Save(ctx context.Context) (*CTLog, error) {
	return withHooks(ctx, clc.sqlSave, clc.mutation, clc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (clc *CTLogCreate) SaveX(ctx context.Context) *CTLog {
	v, err := clc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clc *CTLogCreate) Exec(ctx context.Context) error {
	_, err := clc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clc *CTLogCreate) ExecX(ctx context.Context) {
	if err := clc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (clc *CTLogCreate) check() error {
	if _, ok := clc.mutation.MonitorLogID(); !ok {
		return &ValidationError{Name: "monitor_log_id", err: errors.New(`ent: missing required field "CTLog.monitor_log_id"`)}
	}
	return nil
}

func (clc *CTLogCreate) sqlSave(ctx context.Context) (*CTLog, error) {
	if err := clc.check(); err != nil {
		return nil, err
	}
	_node, _spec := clc.createSpec()
	if err := sqlgraph.CreateNode(ctx, clc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	clc.mutation.id = &_node.ID
	clc.mutation.done = true
	return _node, nil
}

func (clc *CTLogCreate) createSpec() (*CTLog, *sqlgraph.CreateSpec) {
	var (
		_node = &CTLog{config: clc.config}
		_spec = sqlgraph.NewCreateSpec(ctlog.Table, sqlgraph.NewFieldSpec(ctlog.FieldID, field.TypeInt))
	)
	if value, ok := clc.mutation.MonitorLogID(); ok {
		_spec.SetField(ctlog.FieldMonitorLogID, field.TypeInt, value)
		_node.MonitorLogID = value
	}
	if nodes := clc.mutation.TaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ctlog.TaTable,
			Columns: []string{ctlog.TaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ta.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ct_log_ta = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CTLogCreateBulk is the builder for creating many CTLog entities in bulk.
type CTLogCreateBulk struct {
	config
	err      error
	builders []*CTLogCreate
}

// Save creates the CTLog entities in the database.
func (clcb *CTLogCreateBulk) Save(ctx context.Context) ([]*CTLog, error) {
	if clcb.err != nil {
		return nil, clcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(clcb.builders))
	nodes := make([]*CTLog, len(clcb.builders))
	mutators := make([]Mutator, len(clcb.builders))
	for i := range clcb.builders {
		func(i int, root context.Context) {
			builder := clcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CTLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, clcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, clcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, clcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (clcb *CTLogCreateBulk) SaveX(ctx context.Context) []*CTLog {
	v, err := clcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clcb *CTLogCreateBulk) Exec(ctx context.Context) error {
	_, err := clcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clcb *CTLogCreateBulk) ExecX(ctx context.Context) {
	if err := clcb.Exec(ctx); err != nil {
		panic(err)
	}
}
