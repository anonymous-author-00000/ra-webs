// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/anonymous-author-00000/ra-webs/monitor/ent/evidencelog"
	"github.com/anonymous-author-00000/ra-webs/monitor/ent/ta"
)

// EvidenceLogCreate is the builder for creating a EvidenceLog entity.
type EvidenceLogCreate struct {
	config
	mutation *EvidenceLogMutation
	hooks    []Hook
}

// SetEvidence sets the "evidence" field.
func (elc *EvidenceLogCreate) SetEvidence(s string) *EvidenceLogCreate {
	elc.mutation.SetEvidence(s)
	return elc
}

// SetRepository sets the "repository" field.
func (elc *EvidenceLogCreate) SetRepository(s string) *EvidenceLogCreate {
	elc.mutation.SetRepository(s)
	return elc
}

// SetCommitID sets the "commit_id" field.
func (elc *EvidenceLogCreate) SetCommitID(s string) *EvidenceLogCreate {
	elc.mutation.SetCommitID(s)
	return elc
}

// SetUniqueID sets the "unique_id" field.
func (elc *EvidenceLogCreate) SetUniqueID(b []byte) *EvidenceLogCreate {
	elc.mutation.SetUniqueID(b)
	return elc
}

// SetTaID sets the "ta" edge to the TA entity by ID.
func (elc *EvidenceLogCreate) SetTaID(id int) *EvidenceLogCreate {
	elc.mutation.SetTaID(id)
	return elc
}

// SetNillableTaID sets the "ta" edge to the TA entity by ID if the given value is not nil.
func (elc *EvidenceLogCreate) SetNillableTaID(id *int) *EvidenceLogCreate {
	if id != nil {
		elc = elc.SetTaID(*id)
	}
	return elc
}

// SetTa sets the "ta" edge to the TA entity.
func (elc *EvidenceLogCreate) SetTa(t *TA) *EvidenceLogCreate {
	return elc.SetTaID(t.ID)
}

// Mutation returns the EvidenceLogMutation object of the builder.
func (elc *EvidenceLogCreate) Mutation() *EvidenceLogMutation {
	return elc.mutation
}

// Save creates the EvidenceLog in the database.
func (elc *EvidenceLogCreate) Save(ctx context.Context) (*EvidenceLog, error) {
	return withHooks(ctx, elc.sqlSave, elc.mutation, elc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (elc *EvidenceLogCreate) SaveX(ctx context.Context) *EvidenceLog {
	v, err := elc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (elc *EvidenceLogCreate) Exec(ctx context.Context) error {
	_, err := elc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elc *EvidenceLogCreate) ExecX(ctx context.Context) {
	if err := elc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (elc *EvidenceLogCreate) check() error {
	if _, ok := elc.mutation.Evidence(); !ok {
		return &ValidationError{Name: "evidence", err: errors.New(`ent: missing required field "EvidenceLog.evidence"`)}
	}
	if _, ok := elc.mutation.Repository(); !ok {
		return &ValidationError{Name: "repository", err: errors.New(`ent: missing required field "EvidenceLog.repository"`)}
	}
	if _, ok := elc.mutation.CommitID(); !ok {
		return &ValidationError{Name: "commit_id", err: errors.New(`ent: missing required field "EvidenceLog.commit_id"`)}
	}
	if _, ok := elc.mutation.UniqueID(); !ok {
		return &ValidationError{Name: "unique_id", err: errors.New(`ent: missing required field "EvidenceLog.unique_id"`)}
	}
	return nil
}

func (elc *EvidenceLogCreate) sqlSave(ctx context.Context) (*EvidenceLog, error) {
	if err := elc.check(); err != nil {
		return nil, err
	}
	_node, _spec := elc.createSpec()
	if err := sqlgraph.CreateNode(ctx, elc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	elc.mutation.id = &_node.ID
	elc.mutation.done = true
	return _node, nil
}

func (elc *EvidenceLogCreate) createSpec() (*EvidenceLog, *sqlgraph.CreateSpec) {
	var (
		_node = &EvidenceLog{config: elc.config}
		_spec = sqlgraph.NewCreateSpec(evidencelog.Table, sqlgraph.NewFieldSpec(evidencelog.FieldID, field.TypeInt))
	)
	if value, ok := elc.mutation.Evidence(); ok {
		_spec.SetField(evidencelog.FieldEvidence, field.TypeString, value)
		_node.Evidence = value
	}
	if value, ok := elc.mutation.Repository(); ok {
		_spec.SetField(evidencelog.FieldRepository, field.TypeString, value)
		_node.Repository = value
	}
	if value, ok := elc.mutation.CommitID(); ok {
		_spec.SetField(evidencelog.FieldCommitID, field.TypeString, value)
		_node.CommitID = value
	}
	if value, ok := elc.mutation.UniqueID(); ok {
		_spec.SetField(evidencelog.FieldUniqueID, field.TypeBytes, value)
		_node.UniqueID = value
	}
	if nodes := elc.mutation.TaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   evidencelog.TaTable,
			Columns: []string{evidencelog.TaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ta.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EvidenceLogCreateBulk is the builder for creating many EvidenceLog entities in bulk.
type EvidenceLogCreateBulk struct {
	config
	err      error
	builders []*EvidenceLogCreate
}

// Save creates the EvidenceLog entities in the database.
func (elcb *EvidenceLogCreateBulk) Save(ctx context.Context) ([]*EvidenceLog, error) {
	if elcb.err != nil {
		return nil, elcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(elcb.builders))
	nodes := make([]*EvidenceLog, len(elcb.builders))
	mutators := make([]Mutator, len(elcb.builders))
	for i := range elcb.builders {
		func(i int, root context.Context) {
			builder := elcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EvidenceLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, elcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, elcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, elcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (elcb *EvidenceLogCreateBulk) SaveX(ctx context.Context) []*EvidenceLog {
	v, err := elcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (elcb *EvidenceLogCreateBulk) Exec(ctx context.Context) error {
	_, err := elcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elcb *EvidenceLogCreateBulk) ExecX(ctx context.Context) {
	if err := elcb.Exec(ctx); err != nil {
		panic(err)
	}
}
