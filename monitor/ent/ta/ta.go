// Code generated by ent, DO NOT EDIT.

package ta

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the ta type in the database.
	Label = "ta"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPublicKey holds the string denoting the public_key field in the database.
	FieldPublicKey = "public_key"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// EdgeCtLog holds the string denoting the ct_log edge name in mutations.
	EdgeCtLog = "ct_log"
	// EdgeEvidenceLog holds the string denoting the evidence_log edge name in mutations.
	EdgeEvidenceLog = "evidence_log"
	// Table holds the table name of the ta in the database.
	Table = "tas"
	// CtLogTable is the table that holds the ct_log relation/edge.
	CtLogTable = "ct_logs"
	// CtLogInverseTable is the table name for the CTLog entity.
	// It exists in this package in order to avoid circular dependency with the "ctlog" package.
	CtLogInverseTable = "ct_logs"
	// CtLogColumn is the table column denoting the ct_log relation/edge.
	CtLogColumn = "ct_log_ta"
	// EvidenceLogTable is the table that holds the evidence_log relation/edge.
	EvidenceLogTable = "tas"
	// EvidenceLogInverseTable is the table name for the EvidenceLog entity.
	// It exists in this package in order to avoid circular dependency with the "evidencelog" package.
	EvidenceLogInverseTable = "evidence_logs"
	// EvidenceLogColumn is the table column denoting the evidence_log relation/edge.
	EvidenceLogColumn = "evidence_log_ta"
)

// Columns holds all SQL columns for ta fields.
var Columns = []string{
	FieldID,
	FieldPublicKey,
	FieldIsActive,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "tas"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"evidence_log_ta",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
)

// OrderOption defines the ordering options for the TA queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByCtLogCount orders the results by ct_log count.
func ByCtLogCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCtLogStep(), opts...)
	}
}

// ByCtLog orders the results by ct_log terms.
func ByCtLog(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCtLogStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEvidenceLogField orders the results by evidence_log field.
func ByEvidenceLogField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEvidenceLogStep(), sql.OrderByField(field, opts...))
	}
}
func newCtLogStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CtLogInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, CtLogTable, CtLogColumn),
	)
}
func newEvidenceLogStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EvidenceLogInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, EvidenceLogTable, EvidenceLogColumn),
	)
}
