// Code generated by ent, DO NOT EDIT.

package ta

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/anonymous-author-00000/ra-webs/monitor/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TA {
	return predicate.TA(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TA {
	return predicate.TA(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TA {
	return predicate.TA(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TA {
	return predicate.TA(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TA {
	return predicate.TA(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TA {
	return predicate.TA(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TA {
	return predicate.TA(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TA {
	return predicate.TA(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TA {
	return predicate.TA(sql.FieldLTE(FieldID, id))
}

// PublicKey applies equality check predicate on the "public_key" field. It's identical to PublicKeyEQ.
func PublicKey(v []byte) predicate.TA {
	return predicate.TA(sql.FieldEQ(FieldPublicKey, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.TA {
	return predicate.TA(sql.FieldEQ(FieldIsActive, v))
}

// PublicKeyEQ applies the EQ predicate on the "public_key" field.
func PublicKeyEQ(v []byte) predicate.TA {
	return predicate.TA(sql.FieldEQ(FieldPublicKey, v))
}

// PublicKeyNEQ applies the NEQ predicate on the "public_key" field.
func PublicKeyNEQ(v []byte) predicate.TA {
	return predicate.TA(sql.FieldNEQ(FieldPublicKey, v))
}

// PublicKeyIn applies the In predicate on the "public_key" field.
func PublicKeyIn(vs ...[]byte) predicate.TA {
	return predicate.TA(sql.FieldIn(FieldPublicKey, vs...))
}

// PublicKeyNotIn applies the NotIn predicate on the "public_key" field.
func PublicKeyNotIn(vs ...[]byte) predicate.TA {
	return predicate.TA(sql.FieldNotIn(FieldPublicKey, vs...))
}

// PublicKeyGT applies the GT predicate on the "public_key" field.
func PublicKeyGT(v []byte) predicate.TA {
	return predicate.TA(sql.FieldGT(FieldPublicKey, v))
}

// PublicKeyGTE applies the GTE predicate on the "public_key" field.
func PublicKeyGTE(v []byte) predicate.TA {
	return predicate.TA(sql.FieldGTE(FieldPublicKey, v))
}

// PublicKeyLT applies the LT predicate on the "public_key" field.
func PublicKeyLT(v []byte) predicate.TA {
	return predicate.TA(sql.FieldLT(FieldPublicKey, v))
}

// PublicKeyLTE applies the LTE predicate on the "public_key" field.
func PublicKeyLTE(v []byte) predicate.TA {
	return predicate.TA(sql.FieldLTE(FieldPublicKey, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.TA {
	return predicate.TA(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.TA {
	return predicate.TA(sql.FieldNEQ(FieldIsActive, v))
}

// HasCtLog applies the HasEdge predicate on the "ct_log" edge.
func HasCtLog() predicate.TA {
	return predicate.TA(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, CtLogTable, CtLogColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCtLogWith applies the HasEdge predicate on the "ct_log" edge with a given conditions (other predicates).
func HasCtLogWith(preds ...predicate.CTLog) predicate.TA {
	return predicate.TA(func(s *sql.Selector) {
		step := newCtLogStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEvidenceLog applies the HasEdge predicate on the "evidence_log" edge.
func HasEvidenceLog() predicate.TA {
	return predicate.TA(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, EvidenceLogTable, EvidenceLogColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEvidenceLogWith applies the HasEdge predicate on the "evidence_log" edge with a given conditions (other predicates).
func HasEvidenceLogWith(preds ...predicate.EvidenceLog) predicate.TA {
	return predicate.TA(func(s *sql.Selector) {
		step := newEvidenceLogStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TA) predicate.TA {
	return predicate.TA(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TA) predicate.TA {
	return predicate.TA(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TA) predicate.TA {
	return predicate.TA(sql.NotPredicates(p))
}
